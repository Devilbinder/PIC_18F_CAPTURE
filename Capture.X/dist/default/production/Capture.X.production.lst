

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Dec 17 18:11:13 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 1.41
    31                           ; Generated 25/01/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4520 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	smallconst
    66  000600                     __psmallconst:
    67                           	opt stack 0
    68  000600  00                 	db	0
    69  000601                     _dpowers:
    70                           	opt stack 0
    71  000601  0001               	dw	1
    72  000603  000A               	dw	10
    73  000605  0064               	dw	100
    74  000607  03E8               	dw	1000
    75  000609  2710               	dw	10000
    76  00060B                     __end_of_dpowers:
    77                           	opt stack 0
    78  0000                     _RCREG	set	4014
    79  0000                     _TXREG	set	4013
    80  0000                     _PIE1bits	set	3997
    81  0000                     _IPR1bits	set	3999
    82  0000                     _TXSTAbits	set	4012
    83  0000                     _BAUDCONbits	set	4024
    84  0000                     _RCSTAbits	set	4011
    85  0000                     _SPBRG	set	4015
    86  0000                     _SPBRGH	set	4016
    87  0000                     _CCPR2H	set	4028
    88  0000                     _CCPR2L	set	4027
    89  0000                     _PIR2bits	set	4001
    90  0000                     _INTCONbits	set	4082
    91  0000                     _RCONbits	set	4048
    92  0000                     _PIE2bits	set	4000
    93  0000                     _IPR2bits	set	4002
    94  0000                     _T3CONbits	set	4017
    95  0000                     _CCP2CONbits	set	4026
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATB	set	3978
    98  0000                     _TRISB	set	3987
    99  0000                     _OSCCONbits	set	4051
   100  00060B                     STR_2:
   101  00060B  0D                 	db	13
   102  00060C  74                 	db	116	;'t'
   103  00060D  69                 	db	105	;'i'
   104  00060E  6D                 	db	109	;'m'
   105  00060F  65                 	db	101	;'e'
   106  000610  20                 	db	32
   107  000611  70                 	db	112	;'p'
   108  000612  72                 	db	114	;'r'
   109  000613  65                 	db	101	;'e'
   110  000614  73                 	db	115	;'s'
   111  000615  73                 	db	115	;'s'
   112  000616  20                 	db	32
   113  000617  25                 	db	37
   114  000618  31                 	db	49	;'1'
   115  000619  30                 	db	48	;'0'
   116  00061A  75                 	db	117	;'u'
   117  00061B  6D                 	db	109	;'m'
   118  00061C  73                 	db	115	;'s'
   119  00061D  00                 	db	0
   120  00061E                     STR_1:
   121  00061E  0A                 	db	10
   122  00061F  0D                 	db	13
   123  000620  70                 	db	112	;'p'
   124  000621  72                 	db	114	;'r'
   125  000622  6F                 	db	111	;'o'
   126  000623  67                 	db	103	;'g'
   127  000624  72                 	db	114	;'r'
   128  000625  61                 	db	97	;'a'
   129  000626  6D                 	db	109	;'m'
   130  000627  20                 	db	32
   131  000628  73                 	db	115	;'s'
   132  000629  74                 	db	116	;'t'
   133  00062A  61                 	db	97	;'a'
   134  00062B  72                 	db	114	;'r'
   135  00062C  74                 	db	116	;'t'
   136  00062D  0A                 	db	10
   137  00062E  0D                 	db	13
   138  00062F  00                 	db	0
   139                           
   140                           ; #config settings
   141  000630  00                 	db	0	; dummy byte at the end
   142  0000                     
   143                           	psect	cinit
   144  000C6A                     __pcinit:
   145                           	opt stack 0
   146  000C6A                     start_initialization:
   147                           	opt stack 0
   148  000C6A                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to BANK1 (256 bytes)
   152  000C6A  EE01  F000         	lfsr	0,__pbssBANK1
   153  000C6E  EE11 F000          	lfsr	1,256
   154  000C72                     clear_0:
   155  000C72  6AEE               	clrf	postinc0,c
   156  000C74  50E5               	movf	postdec1,w,c
   157  000C76  50E1               	movf	fsr1l,w,c
   158  000C78  E1FC               	bnz	clear_0
   159  000C7A  50E2               	movf	fsr1h,w,c
   160  000C7C  E1FA               	bnz	clear_0
   161                           
   162                           ; Clear objects allocated to COMRAM (13 bytes)
   163  000C7E  EE00  F046         	lfsr	0,__pbssCOMRAM
   164  000C82  0E0D               	movlw	13
   165  000C84                     clear_1:
   166  000C84  6AEE               	clrf	postinc0,c
   167  000C86  06E8               	decf	wreg,f,c
   168  000C88  E1FD               	bnz	clear_1
   169  000C8A                     end_of_initialization:
   170                           	opt stack 0
   171  000C8A                     __end_of__initialization:
   172                           	opt stack 0
   173  000C8A  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   174  000C8C  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   175  000C8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  000C90  6EF8               	movwf	tblptru,c
   177  000C92  0100               	movlb	0
   178  000C94  EF12  F004         	goto	_main	;jump to C main() function
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           postdec1	equ	0xFE5
   183                           fsr1h	equ	0xFE2
   184                           fsr1l	equ	0xFE1
   185                           
   186                           	psect	bssCOMRAM
   187  000046                     __pbssCOMRAM:
   188                           	opt stack 0
   189  000046                     _cap_overflow_tmr3:
   190                           	opt stack 0
   191  000046                     	ds	4
   192  00004A                     _overflow_tmr3:
   193                           	opt stack 0
   194  00004A                     	ds	4
   195  00004E                     _ccp2value:
   196                           	opt stack 0
   197  00004E                     	ds	2
   198  000050                     _new_time_bool:
   199                           	opt stack 0
   200  000050                     	ds	1
   201  000051                     _captrue_value:
   202                           	opt stack 0
   203  000051                     	ds	2
   204                           tblptru	equ	0xFF8
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           postdec1	equ	0xFE5
   208                           fsr1h	equ	0xFE2
   209                           fsr1l	equ	0xFE1
   210                           
   211                           	psect	bssBANK1
   212  000100                     __pbssBANK1:
   213                           	opt stack 0
   214  000100                     _print_buffer:
   215                           	opt stack 0
   216  000100                     	ds	256
   217                           tblptru	equ	0xFF8
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1h	equ	0xFE2
   222                           fsr1l	equ	0xFE1
   223                           
   224                           	psect	cstackCOMRAM
   225  000001                     __pcstackCOMRAM:
   226                           	opt stack 0
   227  000001                     ??_high_isr:
   228  000001                     
   229                           ; 1 bytes @ 0x0
   230  000001                     	ds	14
   231  00000F                     ??_low_isr:
   232                           
   233                           ; 1 bytes @ 0xE
   234  00000F                     	ds	17
   235  000020                     ??_isdigit:
   236  000020                     ?___wmul:
   237                           	opt stack 0
   238  000020                     ?___lwdiv:
   239                           	opt stack 0
   240  000020                     ?___lmul:
   241                           	opt stack 0
   242  000020                     ?___lldiv:
   243                           	opt stack 0
   244  000020                     uart_send@c:
   245                           	opt stack 0
   246  000020                     uart_init@gen_reg:
   247                           	opt stack 0
   248  000020                     ___wmul@multiplier:
   249                           	opt stack 0
   250  000020                     ___lwdiv@dividend:
   251                           	opt stack 0
   252  000020                     memcpy@d1:
   253                           	opt stack 0
   254  000020                     ___lmul@multiplier:
   255                           	opt stack 0
   256  000020                     ___lldiv@dividend:
   257                           	opt stack 0
   258                           
   259                           ; 4 bytes @ 0x1F
   260  000020                     	ds	1
   261  000021                     _isdigit$1040:
   262                           	opt stack 0
   263  000021                     uart_send_string@c:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x20
   267  000021                     	ds	1
   268  000022                     isdigit@c:
   269                           	opt stack 0
   270  000022                     uart_init@sync:
   271                           	opt stack 0
   272  000022                     ___wmul@multiplicand:
   273                           	opt stack 0
   274  000022                     ___lwdiv@divisor:
   275                           	opt stack 0
   276  000022                     memcpy@s1:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x21
   280  000022                     	ds	1
   281  000023                     uart_send_string@i:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x22
   285  000023                     	ds	1
   286  000024                     uart_init@brgh:
   287                           	opt stack 0
   288  000024                     ___wmul@product:
   289                           	opt stack 0
   290  000024                     ___lwdiv@quotient:
   291                           	opt stack 0
   292  000024                     memcpy@n:
   293                           	opt stack 0
   294  000024                     ___lmul@multiplicand:
   295                           	opt stack 0
   296  000024                     ___lldiv@divisor:
   297                           	opt stack 0
   298                           
   299                           ; 4 bytes @ 0x23
   300  000024                     	ds	2
   301  000026                     ___lwdiv@counter:
   302                           	opt stack 0
   303  000026                     uart_init@brg16:
   304                           	opt stack 0
   305  000026                     memcpy@d:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x25
   309  000026                     	ds	1
   310  000027                     ?___lwmod:
   311                           	opt stack 0
   312  000027                     ___lwmod@dividend:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x26
   316  000027                     	ds	1
   317  000028                     memcpy@s:
   318                           	opt stack 0
   319  000028                     ___lmul@product:
   320                           	opt stack 0
   321  000028                     ___lldiv@quotient:
   322                           	opt stack 0
   323                           
   324                           ; 4 bytes @ 0x27
   325  000028                     	ds	1
   326  000029                     ___lwmod@divisor:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x28
   330  000029                     	ds	2
   331  00002B                     ___lwmod@counter:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0x2A
   335  00002B                     	ds	1
   336  00002C                     ?_time_after_captrue:
   337                           	opt stack 0
   338  00002C                     ___lldiv@counter:
   339                           	opt stack 0
   340  00002C                     time_after_captrue@overflow:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x2B
   344  00002C                     	ds	1
   345  00002D                     ?_sprintf:
   346                           	opt stack 0
   347  00002D                     sprintf@sp:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x2C
   351  00002D                     	ds	2
   352  00002F                     sprintf@f:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x2E
   356  00002F                     	ds	1
   357  000030                     time_after_captrue@captrue_now:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x2F
   361  000030                     	ds	2
   362  000032                     time_after_captrue@cap_value:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x31
   366  000032                     	ds	3
   367  000035                     ??_sprintf:
   368                           
   369                           ; 1 bytes @ 0x34
   370  000035                     	ds	4
   371  000039                     sprintf@flag:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x38
   375  000039                     	ds	1
   376  00003A                     sprintf@ap:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x39
   380  00003A                     	ds	2
   381  00003C                     sprintf@val:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x3B
   385  00003C                     	ds	2
   386  00003E                     sprintf@prec:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x3D
   390  00003E                     	ds	1
   391  00003F                     sprintf@width:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x3E
   395  00003F                     	ds	2
   396  000041                     sprintf@c:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x40
   400  000041                     	ds	1
   401  000042                     main@time_ccp:
   402                           	opt stack 0
   403                           
   404                           ; 4 bytes @ 0x41
   405  000042                     	ds	4
   406                           tblptru	equ	0xFF8
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 35 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  time_ccp        4   65[COMRAM] unsigned long 
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   432 ;;      Params:         0       0       0       0       0       0       0
   433 ;;      Locals:         4       0       0       0       0       0       0
   434 ;;      Temps:          0       0       0       0       0       0       0
   435 ;;      Totals:         4       0       0       0       0       0       0
   436 ;;Total ram usage:        4 bytes
   437 ;; Hardware stack levels required when called:    4
   438 ;; This function calls:
   439 ;;		___lldiv
   440 ;;		_sprintf
   441 ;;		_time_after_captrue
   442 ;;		_uart_init
   443 ;;		_uart_send_string
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450  000824                     __ptext0:
   451                           	opt stack 0
   452  000824                     _main:
   453                           	opt stack 27
   454                           
   455                           ;main.c: 37: uint32_t time_ccp = 0;
   456                           
   457                           ;incstack = 0
   458  000824  0E00               	movlw	0
   459  000826  6E42               	movwf	main@time_ccp,c
   460  000828  0E00               	movlw	0
   461  00082A  6E43               	movwf	main@time_ccp+1,c
   462  00082C  0E00               	movlw	0
   463  00082E  6E44               	movwf	main@time_ccp+2,c
   464  000830  0E00               	movlw	0
   465  000832  6E45               	movwf	main@time_ccp+3,c
   466                           
   467                           ;main.c: 39: OSCCONbits.IRCF = 0x07;
   468  000834  88D3               	bsf	4051,4,c	;volatile
   469  000836  8AD3               	bsf	4051,5,c	;volatile
   470  000838  8CD3               	bsf	4051,6,c	;volatile
   471                           
   472                           ;main.c: 40: OSCCONbits.SCS = 0x03;
   473  00083A  0E03               	movlw	3
   474  00083C  12D3               	iorwf	4051,f,c	;volatile
   475  00083E                     l52:
   476  00083E  A4D3               	btfss	4051,2,c	;volatile
   477  000840  D7FE               	goto	l52
   478                           
   479                           ;main.c: 43: TRISB=0;
   480  000842  0E00               	movlw	0
   481  000844  6E93               	movwf	3987,c	;volatile
   482                           
   483                           ;main.c: 44: LATB=0x00;
   484  000846  0E00               	movlw	0
   485  000848  6E8A               	movwf	3978,c	;volatile
   486                           
   487                           ;main.c: 46: TRISCbits.RC1 = 1;
   488  00084A  8294               	bsf	3988,1,c	;volatile
   489                           
   490                           ;main.c: 48: uart_init(51,0,1,0);
   491  00084C  0E00               	movlw	0
   492  00084E  6E21               	movwf	uart_init@gen_reg+1,c
   493  000850  0E33               	movlw	51
   494  000852  6E20               	movwf	uart_init@gen_reg,c
   495  000854  0E00               	movlw	0
   496  000856  6E23               	movwf	uart_init@sync+1,c
   497  000858  0E00               	movlw	0
   498  00085A  6E22               	movwf	uart_init@sync,c
   499  00085C  0E00               	movlw	0
   500  00085E  6E25               	movwf	uart_init@brgh+1,c
   501  000860  0E01               	movlw	1
   502  000862  6E24               	movwf	uart_init@brgh,c
   503  000864  0E00               	movlw	0
   504  000866  6E27               	movwf	uart_init@brg16+1,c
   505  000868  0E00               	movlw	0
   506  00086A  6E26               	movwf	uart_init@brg16,c
   507  00086C  EC1A  F006         	call	_uart_init	;wreg free
   508                           
   509                           ;main.c: 50: CCP2CONbits.CCP2M = 0x05;
   510  000870  50BA               	movf	4026,w,c	;volatile
   511  000872  0BF0               	andlw	-16
   512  000874  0905               	iorlw	5
   513  000876  6EBA               	movwf	4026,c	;volatile
   514                           
   515                           ;main.c: 52: T3CONbits.RD16 = 0;
   516  000878  9EB1               	bcf	4017,7,c	;volatile
   517                           
   518                           ;main.c: 53: T3CONbits.T3CCP2 = 0;
   519  00087A  9CB1               	bcf	4017,6,c	;volatile
   520                           
   521                           ;main.c: 54: T3CONbits.T3CCP1 = 1;
   522  00087C  86B1               	bsf	4017,3,c	;volatile
   523                           
   524                           ;main.c: 55: T3CONbits.T3CKPS = 1;
   525  00087E  50B1               	movf	4017,w,c	;volatile
   526  000880  0BCF               	andlw	-49
   527  000882  0910               	iorlw	16
   528  000884  6EB1               	movwf	4017,c	;volatile
   529                           
   530                           ;main.c: 56: T3CONbits.TMR3CS = 0;
   531  000886  92B1               	bcf	4017,1,c	;volatile
   532                           
   533                           ;main.c: 58: IPR2bits.TMR3IP = 0;
   534  000888  92A2               	bcf	4002,1,c	;volatile
   535                           
   536                           ;main.c: 59: IPR2bits.CCP2IP = 1;
   537  00088A  80A2               	bsf	4002,0,c	;volatile
   538                           
   539                           ;main.c: 61: PIE2bits.TMR3IE = 1;
   540  00088C  82A0               	bsf	4000,1,c	;volatile
   541                           
   542                           ;main.c: 62: PIE2bits.CCP2IE = 1;
   543  00088E  80A0               	bsf	4000,0,c	;volatile
   544                           
   545                           ;main.c: 65: RCONbits.IPEN = 1;
   546  000890  8ED0               	bsf	4048,7,c	;volatile
   547                           
   548                           ;main.c: 66: INTCONbits.GIEH = 1;
   549  000892  8EF2               	bsf	intcon,7,c	;volatile
   550                           
   551                           ;main.c: 67: INTCONbits.GIEL = 1;
   552  000894  8CF2               	bsf	intcon,6,c	;volatile
   553                           
   554                           ;main.c: 69: T3CONbits.TMR3ON = 1;
   555  000896  80B1               	bsf	4017,0,c	;volatile
   556                           
   557                           ;main.c: 71: sprintf(print_buffer,"\n\rprogram start\n\r");
   558  000898  0E00               	movlw	low _print_buffer
   559  00089A  6E2D               	movwf	sprintf@sp,c
   560  00089C  0E01               	movlw	high _print_buffer
   561  00089E  6E2E               	movwf	sprintf@sp+1,c
   562  0008A0  0E1E               	movlw	low STR_1
   563  0008A2  6E2F               	movwf	sprintf@f,c
   564  0008A4  0E06               	movlw	high STR_1
   565  0008A6  6E30               	movwf	sprintf@f+1,c
   566  0008A8  EC19  F003         	call	_sprintf	;wreg free
   567                           
   568                           ;main.c: 72: uart_send_string(print_buffer);
   569  0008AC  0E00               	movlw	low _print_buffer
   570  0008AE  6E21               	movwf	uart_send_string@c,c
   571  0008B0  0E01               	movlw	high _print_buffer
   572  0008B2  6E22               	movwf	uart_send_string@c+1,c
   573  0008B4  ECFF  F005         	call	_uart_send_string	;wreg free
   574  0008B8                     l1326:
   575                           
   576                           ;main.c: 76: if(new_time_bool){
   577  0008B8  5050               	movf	_new_time_bool,w,c
   578  0008BA  B4D8               	btfsc	status,2,c
   579  0008BC  D7FD               	goto	l1326
   580                           
   581                           ;main.c: 77: time_ccp = time_after_captrue(cap_overflow_tmr3,&captrue_value);
   582  0008BE  C046  F02C         	movff	_cap_overflow_tmr3,time_after_captrue@overflow
   583  0008C2  C047  F02D         	movff	_cap_overflow_tmr3+1,time_after_captrue@overflow+1
   584  0008C6  C048  F02E         	movff	_cap_overflow_tmr3+2,time_after_captrue@overflow+2
   585  0008CA  C049  F02F         	movff	_cap_overflow_tmr3+3,time_after_captrue@overflow+3
   586  0008CE  0E51               	movlw	low _captrue_value
   587  0008D0  6E30               	movwf	time_after_captrue@captrue_now,c
   588  0008D2  0E00               	movlw	high _captrue_value
   589  0008D4  6E31               	movwf	time_after_captrue@captrue_now+1,c
   590  0008D6  EC39  F005         	call	_time_after_captrue	;wreg free
   591  0008DA  C02C  F042         	movff	?_time_after_captrue,main@time_ccp
   592  0008DE  C02D  F043         	movff	?_time_after_captrue+1,main@time_ccp+1
   593  0008E2  C02E  F044         	movff	?_time_after_captrue+2,main@time_ccp+2
   594  0008E6  C02F  F045         	movff	?_time_after_captrue+3,main@time_ccp+3
   595                           
   596                           ;main.c: 78: sprintf(print_buffer,"\rtime press %10ums",time_ccp/1000);
   597  0008EA  0E00               	movlw	low _print_buffer
   598  0008EC  6E2D               	movwf	sprintf@sp,c
   599  0008EE  0E01               	movlw	high _print_buffer
   600  0008F0  6E2E               	movwf	sprintf@sp+1,c
   601  0008F2  0E0B               	movlw	low STR_2
   602  0008F4  6E2F               	movwf	sprintf@f,c
   603  0008F6  0E06               	movlw	high STR_2
   604  0008F8  6E30               	movwf	sprintf@f+1,c
   605  0008FA  C042  F020         	movff	main@time_ccp,___lldiv@dividend
   606  0008FE  C043  F021         	movff	main@time_ccp+1,___lldiv@dividend+1
   607  000902  C044  F022         	movff	main@time_ccp+2,___lldiv@dividend+2
   608  000906  C045  F023         	movff	main@time_ccp+3,___lldiv@dividend+3
   609  00090A  0EE8               	movlw	232
   610  00090C  6E24               	movwf	___lldiv@divisor,c
   611  00090E  0E03               	movlw	3
   612  000910  6E25               	movwf	___lldiv@divisor+1,c
   613  000912  0E00               	movlw	0
   614  000914  6E26               	movwf	___lldiv@divisor+2,c
   615  000916  0E00               	movlw	0
   616  000918  6E27               	movwf	___lldiv@divisor+3,c
   617  00091A  ECF8  F004         	call	___lldiv	;wreg free
   618  00091E  C020  F031         	movff	?___lldiv,?_sprintf+4
   619  000922  C021  F032         	movff	?___lldiv+1,?_sprintf+5
   620  000926  C022  F033         	movff	?___lldiv+2,?_sprintf+6
   621  00092A  C023  F034         	movff	?___lldiv+3,?_sprintf+7
   622  00092E  EC19  F003         	call	_sprintf	;wreg free
   623                           
   624                           ;main.c: 79: uart_send_string(print_buffer);
   625  000932  0E00               	movlw	low _print_buffer
   626  000934  6E21               	movwf	uart_send_string@c,c
   627  000936  0E01               	movlw	high _print_buffer
   628  000938  6E22               	movwf	uart_send_string@c+1,c
   629  00093A  ECFF  F005         	call	_uart_send_string	;wreg free
   630                           
   631                           ;main.c: 80: new_time_bool = 0;
   632  00093E  0E00               	movlw	0
   633  000940  6E50               	movwf	_new_time_bool,c
   634                           
   635                           ;main.c: 81: }
   636                           ;main.c: 83: }
   637  000942  D7BA               	goto	l1326
   638  000944                     __end_of_main:
   639                           	opt stack 0
   640                           tblptru	equ	0xFF8
   641                           intcon	equ	0xFF2
   642                           postinc0	equ	0xFEE
   643                           wreg	equ	0xFE8
   644                           postdec1	equ	0xFE5
   645                           fsr1h	equ	0xFE2
   646                           fsr1l	equ	0xFE1
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _uart_send_string *****************
   650 ;; Defined at:
   651 ;;		line 50 in file "uart_layer.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  c               2   32[COMRAM] PTR unsigned char 
   654 ;;		 -> print_buffer(256), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  i               1   34[COMRAM] unsigned char 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   666 ;;      Params:         2       0       0       0       0       0       0
   667 ;;      Locals:         1       0       0       0       0       0       0
   668 ;;      Temps:          0       0       0       0       0       0       0
   669 ;;      Totals:         3       0       0       0       0       0       0
   670 ;;Total ram usage:        3 bytes
   671 ;; Hardware stack levels used:    1
   672 ;; Hardware stack levels required when called:    3
   673 ;; This function calls:
   674 ;;		_uart_send
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text1
   681  000BFE                     __ptext1:
   682                           	opt stack 0
   683  000BFE                     _uart_send_string:
   684                           	opt stack 27
   685                           
   686                           ;uart_layer.c: 51: uint8_t i=0;
   687                           
   688                           ;incstack = 0
   689  000BFE  0E00               	movlw	0
   690  000C00  6E23               	movwf	uart_send_string@i,c
   691                           
   692                           ;uart_layer.c: 52: while(c[i] != '\0'){
   693  000C02  D00C               	goto	l1260
   694  000C04                     l1256:
   695                           
   696                           ;uart_layer.c: 53: uart_send(c[i]);
   697  000C04  5023               	movf	uart_send_string@i,w,c
   698  000C06  0D01               	mullw	1
   699  000C08  50F3               	movf	prodl,w,c
   700  000C0A  2421               	addwf	uart_send_string@c,w,c
   701  000C0C  6ED9               	movwf	fsr2l,c
   702  000C0E  50F4               	movf	prodh,w,c
   703  000C10  2022               	addwfc	uart_send_string@c+1,w,c
   704  000C12  6EDA               	movwf	fsr2h,c
   705  000C14  50DF               	movf	indf2,w,c
   706  000C16  EC6E  F006         	call	_uart_send
   707                           
   708                           ;uart_layer.c: 54: i++;
   709  000C1A  2A23               	incf	uart_send_string@i,f,c
   710  000C1C                     l1260:
   711  000C1C  5023               	movf	uart_send_string@i,w,c
   712  000C1E  0D01               	mullw	1
   713  000C20  50F3               	movf	prodl,w,c
   714  000C22  2421               	addwf	uart_send_string@c,w,c
   715  000C24  6ED9               	movwf	fsr2l,c
   716  000C26  50F4               	movf	prodh,w,c
   717  000C28  2022               	addwfc	uart_send_string@c+1,w,c
   718  000C2A  6EDA               	movwf	fsr2h,c
   719  000C2C  50DF               	movf	indf2,w,c
   720  000C2E  B4D8               	btfsc	status,2,c
   721  000C30  0012               	return	
   722  000C32  D7E8               	goto	l1256
   723  000C34                     __end_of_uart_send_string:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           prodh	equ	0xFF4
   727                           prodl	equ	0xFF3
   728                           intcon	equ	0xFF2
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           postdec1	equ	0xFE5
   732                           fsr1h	equ	0xFE2
   733                           fsr1l	equ	0xFE1
   734                           indf2	equ	0xFDF
   735                           fsr2h	equ	0xFDA
   736                           fsr2l	equ	0xFD9
   737                           status	equ	0xFD8
   738                           
   739 ;; *************** function _uart_send *****************
   740 ;; Defined at:
   741 ;;		line 24 in file "uart_layer.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;  c               1    wreg     unsigned char 
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  c               1   31[COMRAM] unsigned char 
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		wreg
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   755 ;;      Params:         0       0       0       0       0       0       0
   756 ;;      Locals:         1       0       0       0       0       0       0
   757 ;;      Temps:          0       0       0       0       0       0       0
   758 ;;      Totals:         1       0       0       0       0       0       0
   759 ;;Total ram usage:        1 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; Hardware stack levels required when called:    2
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_uart_send_string
   766 ;;		_uart_send_array
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text2
   771  000CDC                     __ptext2:
   772                           	opt stack 0
   773  000CDC                     _uart_send:
   774                           	opt stack 27
   775                           
   776                           ;incstack = 0
   777                           ;uart_send@c stored from wreg
   778  000CDC  6E20               	movwf	uart_send@c,c
   779                           
   780                           ;uart_layer.c: 25: TXREG=c;
   781  000CDE  C020  FFAD         	movff	uart_send@c,4013	;volatile
   782                           
   783                           ;uart_layer.c: 26: while(TXSTAbits.TRMT==0){
   784  000CE2  D001               	goto	l94
   785  000CE4                     l95:
   786                           
   787                           ;uart_layer.c: 27: __nop();
   788  000CE4  F000               	nop	
   789  000CE6                     l94:
   790  000CE6  B2AC               	btfsc	4012,1,c	;volatile
   791  000CE8  0012               	return	
   792  000CEA  D7FC               	goto	l95
   793  000CEC                     __end_of_uart_send:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           intcon	equ	0xFF2
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1h	equ	0xFE2
   803                           fsr1l	equ	0xFE1
   804                           indf2	equ	0xFDF
   805                           fsr2h	equ	0xFDA
   806                           fsr2l	equ	0xFD9
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _uart_init *****************
   810 ;; Defined at:
   811 ;;		line 4 in file "uart_layer.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  gen_reg         2   31[COMRAM] unsigned int 
   814 ;;  sync            2   33[COMRAM] unsigned int 
   815 ;;  brgh            2   35[COMRAM] unsigned int 
   816 ;;  brg16           2   37[COMRAM] unsigned int 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   828 ;;      Params:         8       0       0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0
   831 ;;      Totals:         8       0       0       0       0       0       0
   832 ;;Total ram usage:        8 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text3
   843  000C34                     __ptext3:
   844                           	opt stack 0
   845  000C34                     _uart_init:
   846                           	opt stack 28
   847                           
   848                           ;uart_layer.c: 6: TRISCbits.RC7=1;
   849                           
   850                           ;incstack = 0
   851  000C34  8E94               	bsf	3988,7,c	;volatile
   852                           
   853                           ;uart_layer.c: 7: TRISCbits.RC6=1;
   854  000C36  8C94               	bsf	3988,6,c	;volatile
   855                           
   856                           ;uart_layer.c: 9: SPBRGH = (gen_reg & 0xFF00) >> 8;
   857  000C38  5021               	movf	uart_init@gen_reg+1,w,c
   858  000C3A  6EB0               	movwf	4016,c	;volatile
   859                           
   860                           ;uart_layer.c: 10: SPBRG = gen_reg & 0x00FF;
   861  000C3C  C020  FFAF         	movff	uart_init@gen_reg,4015	;volatile
   862                           
   863                           ;uart_layer.c: 12: RCSTAbits.CREN = 1;
   864  000C40  88AB               	bsf	4011,4,c	;volatile
   865                           
   866                           ;uart_layer.c: 13: RCSTAbits.SPEN = 1;
   867  000C42  8EAB               	bsf	4011,7,c	;volatile
   868                           
   869                           ;uart_layer.c: 14: BAUDCONbits.BRG16 = brg16;
   870  000C44  B026               	btfsc	uart_init@brg16,0,c
   871  000C46  D002               	bra	u495
   872  000C48  96B8               	bcf	4024,3,c	;volatile
   873  000C4A  D001               	bra	u496
   874  000C4C                     u495:
   875  000C4C  86B8               	bsf	4024,3,c	;volatile
   876  000C4E                     u496:
   877                           
   878                           ;uart_layer.c: 16: TXSTAbits.SYNC = sync;
   879  000C4E  B022               	btfsc	uart_init@sync,0,c
   880  000C50  D002               	bra	u505
   881  000C52  98AC               	bcf	4012,4,c	;volatile
   882  000C54  D001               	bra	u506
   883  000C56                     u505:
   884  000C56  88AC               	bsf	4012,4,c	;volatile
   885  000C58                     u506:
   886                           
   887                           ;uart_layer.c: 17: TXSTAbits.BRGH = brgh;
   888  000C58  B024               	btfsc	uart_init@brgh,0,c
   889  000C5A  D002               	bra	u515
   890  000C5C  94AC               	bcf	4012,2,c	;volatile
   891  000C5E  D001               	bra	u516
   892  000C60                     u515:
   893  000C60  84AC               	bsf	4012,2,c	;volatile
   894  000C62                     u516:
   895                           
   896                           ;uart_layer.c: 18: TXSTAbits.TXEN = 1;
   897  000C62  8AAC               	bsf	4012,5,c	;volatile
   898                           
   899                           ;uart_layer.c: 20: IPR1bits.RCIP=1;
   900  000C64  8A9F               	bsf	3999,5,c	;volatile
   901                           
   902                           ;uart_layer.c: 21: PIE1bits.RCIE=1;
   903  000C66  8A9D               	bsf	3997,5,c	;volatile
   904  000C68  0012               	return		;funcret
   905  000C6A                     __end_of_uart_init:
   906                           	opt stack 0
   907                           tblptru	equ	0xFF8
   908                           prodh	equ	0xFF4
   909                           prodl	equ	0xFF3
   910                           intcon	equ	0xFF2
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1h	equ	0xFE2
   915                           fsr1l	equ	0xFE1
   916                           indf2	equ	0xFDF
   917                           fsr2h	equ	0xFDA
   918                           fsr2l	equ	0xFD9
   919                           status	equ	0xFD8
   920                           
   921 ;; *************** function _time_after_captrue *****************
   922 ;; Defined at:
   923 ;;		line 29 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  overflow        4   43[COMRAM] unsigned long 
   926 ;;  captrue_now     2   47[COMRAM] PTR struct .
   927 ;;		 -> captrue_value(2), 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  cap_value       2   49[COMRAM] unsigned int 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  4   43[COMRAM] unsigned long 
   932 ;; Registers used:
   933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   939 ;;      Params:         6       0       0       0       0       0       0
   940 ;;      Locals:         2       0       0       0       0       0       0
   941 ;;      Temps:          0       0       0       0       0       0       0
   942 ;;      Totals:         8       0       0       0       0       0       0
   943 ;;Total ram usage:        8 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    3
   946 ;; This function calls:
   947 ;;		___lmul
   948 ;;		_memcpy
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text4
   955  000A72                     __ptext4:
   956                           	opt stack 0
   957  000A72                     _time_after_captrue:
   958                           	opt stack 27
   959                           
   960                           ;main.c: 30: uint16_t cap_value = 0;
   961                           
   962                           ;incstack = 0
   963  000A72  0E00               	movlw	0
   964  000A74  6E33               	movwf	time_after_captrue@cap_value+1,c
   965  000A76  0E00               	movlw	0
   966  000A78  6E32               	movwf	time_after_captrue@cap_value,c
   967                           
   968                           ;main.c: 31: memcpy(&cap_value,captrue_now,sizeof(cap_uint16));
   969  000A7A  0E32               	movlw	low time_after_captrue@cap_value
   970  000A7C  6E20               	movwf	memcpy@d1,c
   971  000A7E  0E00               	movlw	high time_after_captrue@cap_value
   972  000A80  6E21               	movwf	memcpy@d1+1,c
   973  000A82  C030  F022         	movff	time_after_captrue@captrue_now,memcpy@s1
   974  000A86  C031  F023         	movff	time_after_captrue@captrue_now+1,memcpy@s1+1
   975  000A8A  0E00               	movlw	0
   976  000A8C  6E25               	movwf	memcpy@n+1,c
   977  000A8E  0E02               	movlw	2
   978  000A90  6E24               	movwf	memcpy@n,c
   979  000A92  ECDF  F005         	call	_memcpy	;wreg free
   980                           
   981                           ;main.c: 32: return ((overflow * (65535u)) + (cap_value * (1u)));
   982  000A96  C02C  F020         	movff	time_after_captrue@overflow,___lmul@multiplier
   983  000A9A  C02D  F021         	movff	time_after_captrue@overflow+1,___lmul@multiplier+1
   984  000A9E  C02E  F022         	movff	time_after_captrue@overflow+2,___lmul@multiplier+2
   985  000AA2  C02F  F023         	movff	time_after_captrue@overflow+3,___lmul@multiplier+3
   986  000AA6  0EFF               	movlw	255
   987  000AA8  6E24               	movwf	___lmul@multiplicand,c
   988  000AAA  0EFF               	movlw	255
   989  000AAC  6E25               	movwf	___lmul@multiplicand+1,c
   990  000AAE  0E00               	movlw	0
   991  000AB0  6E26               	movwf	___lmul@multiplicand+2,c
   992  000AB2  0E00               	movlw	0
   993  000AB4  6E27               	movwf	___lmul@multiplicand+3,c
   994  000AB6  EC6A  F005         	call	___lmul	;wreg free
   995  000ABA  5032               	movf	time_after_captrue@cap_value,w,c
   996  000ABC  2420               	addwf	?___lmul,w,c
   997  000ABE  6E2C               	movwf	?_time_after_captrue,c
   998  000AC0  5033               	movf	time_after_captrue@cap_value+1,w,c
   999  000AC2  2021               	addwfc	?___lmul+1,w,c
  1000  000AC4  6E2D               	movwf	?_time_after_captrue+1,c
  1001  000AC6  0E00               	movlw	0
  1002  000AC8  2022               	addwfc	?___lmul+2,w,c
  1003  000ACA  6E2E               	movwf	?_time_after_captrue+2,c
  1004  000ACC  0E00               	movlw	0
  1005  000ACE  2023               	addwfc	?___lmul+3,w,c
  1006  000AD0  6E2F               	movwf	?_time_after_captrue+3,c
  1007  000AD2  0012               	return	
  1008  000AD4                     __end_of_time_after_captrue:
  1009                           	opt stack 0
  1010                           tblptru	equ	0xFF8
  1011                           prodh	equ	0xFF4
  1012                           prodl	equ	0xFF3
  1013                           intcon	equ	0xFF2
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1h	equ	0xFE2
  1018                           fsr1l	equ	0xFE1
  1019                           indf2	equ	0xFDF
  1020                           fsr2h	equ	0xFDA
  1021                           fsr2l	equ	0xFD9
  1022                           status	equ	0xFD8
  1023                           
  1024 ;; *************** function _memcpy *****************
  1025 ;; Defined at:
  1026 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  d1              2   31[COMRAM] PTR void 
  1029 ;;		 -> time_after_captrue@cap_value(2), 
  1030 ;;  s1              2   33[COMRAM] PTR const void 
  1031 ;;		 -> captrue_value(2), 
  1032 ;;  n               2   35[COMRAM] unsigned int 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  s               2   39[COMRAM] PTR const unsigned char 
  1035 ;;		 -> captrue_value(2), 
  1036 ;;  d               2   37[COMRAM] PTR unsigned char 
  1037 ;;		 -> time_after_captrue@cap_value(2), 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2   31[COMRAM] PTR void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1047 ;;      Params:         6       0       0       0       0       0       0
  1048 ;;      Locals:         4       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0
  1050 ;;      Totals:        10       0       0       0       0       0       0
  1051 ;;Total ram usage:       10 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    2
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_time_after_captrue
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text5
  1062  000BBE                     __ptext5:
  1063                           	opt stack 0
  1064  000BBE                     _memcpy:
  1065                           	opt stack 27
  1066                           
  1067                           ;incstack = 0
  1068  000BBE  C022  F028         	movff	memcpy@s1,memcpy@s
  1069  000BC2  C023  F029         	movff	memcpy@s1+1,memcpy@s+1
  1070  000BC6  C020  F026         	movff	memcpy@d1,memcpy@d
  1071  000BCA  C021  F027         	movff	memcpy@d1+1,memcpy@d+1
  1072  000BCE  D00E               	goto	l1082
  1073  000BD0                     l1076:
  1074  000BD0  C028  FFD9         	movff	memcpy@s,fsr2l
  1075  000BD4  C029  FFDA         	movff	memcpy@s+1,fsr2h
  1076  000BD8  C026  FFE1         	movff	memcpy@d,fsr1l
  1077  000BDC  C027  FFE2         	movff	memcpy@d+1,fsr1h
  1078  000BE0  CFDF FFE7          	movff	indf2,indf1
  1079  000BE4  4A28               	infsnz	memcpy@s,f,c
  1080  000BE6  2A29               	incf	memcpy@s+1,f,c
  1081  000BE8  4A26               	infsnz	memcpy@d,f,c
  1082  000BEA  2A27               	incf	memcpy@d+1,f,c
  1083  000BEC                     l1082:
  1084  000BEC  0624               	decf	memcpy@n,f,c
  1085  000BEE  A0D8               	btfss	status,0,c
  1086  000BF0  0625               	decf	memcpy@n+1,f,c
  1087  000BF2  2824               	incf	memcpy@n,w,c
  1088  000BF4  E1ED               	bnz	l1076
  1089  000BF6  2825               	incf	memcpy@n+1,w,c
  1090  000BF8  B4D8               	btfsc	status,2,c
  1091  000BFA  0012               	return	
  1092  000BFC  D7E9               	goto	l1076
  1093  000BFE                     __end_of_memcpy:
  1094                           	opt stack 0
  1095                           tblptru	equ	0xFF8
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           intcon	equ	0xFF2
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           indf1	equ	0xFE7
  1102                           postdec1	equ	0xFE5
  1103                           fsr1h	equ	0xFE2
  1104                           fsr1l	equ	0xFE1
  1105                           indf2	equ	0xFDF
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function ___lmul *****************
  1111 ;; Defined at:
  1112 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  multiplier      4   31[COMRAM] unsigned long 
  1115 ;;  multiplicand    4   35[COMRAM] unsigned long 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  product         4   39[COMRAM] unsigned long 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  4   31[COMRAM] unsigned long 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         8       0       0       0       0       0       0
  1128 ;;      Locals:         4       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0
  1130 ;;      Totals:        12       0       0       0       0       0       0
  1131 ;;Total ram usage:       12 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:    2
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_time_after_captrue
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	text6
  1142  000AD4                     __ptext6:
  1143                           	opt stack 0
  1144  000AD4                     ___lmul:
  1145                           	opt stack 27
  1146                           
  1147                           ;incstack = 0
  1148  000AD4  0E00               	movlw	0
  1149  000AD6  6E28               	movwf	___lmul@product,c
  1150  000AD8  0E00               	movlw	0
  1151  000ADA  6E29               	movwf	___lmul@product+1,c
  1152  000ADC  0E00               	movlw	0
  1153  000ADE  6E2A               	movwf	___lmul@product+2,c
  1154  000AE0  0E00               	movlw	0
  1155  000AE2  6E2B               	movwf	___lmul@product+3,c
  1156  000AE4                     l1104:
  1157  000AE4  A020               	btfss	___lmul@multiplier,0,c
  1158  000AE6  D008               	goto	l1108
  1159  000AE8  5024               	movf	___lmul@multiplicand,w,c
  1160  000AEA  2628               	addwf	___lmul@product,f,c
  1161  000AEC  5025               	movf	___lmul@multiplicand+1,w,c
  1162  000AEE  2229               	addwfc	___lmul@product+1,f,c
  1163  000AF0  5026               	movf	___lmul@multiplicand+2,w,c
  1164  000AF2  222A               	addwfc	___lmul@product+2,f,c
  1165  000AF4  5027               	movf	___lmul@multiplicand+3,w,c
  1166  000AF6  222B               	addwfc	___lmul@product+3,f,c
  1167  000AF8                     l1108:
  1168  000AF8  90D8               	bcf	status,0,c
  1169  000AFA  3624               	rlcf	___lmul@multiplicand,f,c
  1170  000AFC  3625               	rlcf	___lmul@multiplicand+1,f,c
  1171  000AFE  3626               	rlcf	___lmul@multiplicand+2,f,c
  1172  000B00  3627               	rlcf	___lmul@multiplicand+3,f,c
  1173  000B02  90D8               	bcf	status,0,c
  1174  000B04  3223               	rrcf	___lmul@multiplier+3,f,c
  1175  000B06  3222               	rrcf	___lmul@multiplier+2,f,c
  1176  000B08  3221               	rrcf	___lmul@multiplier+1,f,c
  1177  000B0A  3220               	rrcf	___lmul@multiplier,f,c
  1178  000B0C  5020               	movf	___lmul@multiplier,w,c
  1179  000B0E  1021               	iorwf	___lmul@multiplier+1,w,c
  1180  000B10  1022               	iorwf	___lmul@multiplier+2,w,c
  1181  000B12  1023               	iorwf	___lmul@multiplier+3,w,c
  1182  000B14  A4D8               	btfss	status,2,c
  1183  000B16  D7E6               	goto	l1104
  1184  000B18  C028  F020         	movff	___lmul@product,?___lmul
  1185  000B1C  C029  F021         	movff	___lmul@product+1,?___lmul+1
  1186  000B20  C02A  F022         	movff	___lmul@product+2,?___lmul+2
  1187  000B24  C02B  F023         	movff	___lmul@product+3,?___lmul+3
  1188  000B28  0012               	return		;funcret
  1189  000B2A                     __end_of___lmul:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           prodh	equ	0xFF4
  1193                           prodl	equ	0xFF3
  1194                           intcon	equ	0xFF2
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           indf1	equ	0xFE7
  1198                           postdec1	equ	0xFE5
  1199                           fsr1h	equ	0xFE2
  1200                           fsr1l	equ	0xFE1
  1201                           indf2	equ	0xFDF
  1202                           fsr2h	equ	0xFDA
  1203                           fsr2l	equ	0xFD9
  1204                           status	equ	0xFD8
  1205                           
  1206 ;; *************** function _sprintf *****************
  1207 ;; Defined at:
  1208 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  sp              2   44[COMRAM] PTR unsigned char 
  1211 ;;		 -> print_buffer(256), 
  1212 ;;  f               2   46[COMRAM] PTR const unsigned char 
  1213 ;;		 -> STR_2(19), STR_1(18), 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  tmpval          4    0        struct .
  1216 ;;  cp              3    0        PTR const unsigned char 
  1217 ;;  width           2   62[COMRAM] int 
  1218 ;;  val             2   59[COMRAM] unsigned int 
  1219 ;;  ap              2   57[COMRAM] PTR void [1]
  1220 ;;		 -> ?_sprintf(2), 
  1221 ;;  len             2    0        unsigned int 
  1222 ;;  c               1   64[COMRAM] char 
  1223 ;;  prec            1   61[COMRAM] char 
  1224 ;;  flag            1   56[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  2   44[COMRAM] int 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1234 ;;      Params:         8       0       0       0       0       0       0
  1235 ;;      Locals:         9       0       0       0       0       0       0
  1236 ;;      Temps:          4       0       0       0       0       0       0
  1237 ;;      Totals:        21       0       0       0       0       0       0
  1238 ;;Total ram usage:       21 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    3
  1241 ;; This function calls:
  1242 ;;		___lwdiv
  1243 ;;		___lwmod
  1244 ;;		___wmul
  1245 ;;		_isdigit
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text7
  1252  000632                     __ptext7:
  1253                           	opt stack 0
  1254  000632                     _sprintf:
  1255                           	opt stack 27
  1256                           
  1257                           ;doprnt.c: 494: va_list ap;
  1258                           ;doprnt.c: 499: signed char c;
  1259                           ;doprnt.c: 501: int width;
  1260                           ;doprnt.c: 506: signed char prec;
  1261                           ;doprnt.c: 508: unsigned char flag;
  1262                           ;doprnt.c: 523: union {
  1263                           ;doprnt.c: 524: unsigned long vd;
  1264                           ;doprnt.c: 525: double integ;
  1265                           ;doprnt.c: 526: } tmpval;
  1266                           ;doprnt.c: 528: unsigned int val;
  1267                           ;doprnt.c: 529: unsigned len;
  1268                           ;doprnt.c: 530: const char * cp;
  1269                           ;doprnt.c: 533: *ap = __va_start();
  1270                           
  1271                           ;incstack = 0
  1272  000632  0E31               	movlw	low (?_sprintf+4)
  1273  000634  6E3A               	movwf	sprintf@ap,c
  1274  000636  0E00               	movlw	high (?_sprintf+4)
  1275  000638  6E3B               	movwf	sprintf@ap+1,c
  1276                           
  1277                           ;doprnt.c: 536: while(c = *f++) {
  1278  00063A  D0E1               	goto	l1248
  1279  00063C                     l1182:
  1280                           
  1281                           ;doprnt.c: 538: if(c != '%')
  1282  00063C  0E25               	movlw	37
  1283  00063E  1841               	xorwf	sprintf@c,w,c
  1284  000640  B4D8               	btfsc	status,2,c
  1285  000642  D009               	goto	l1188
  1286                           
  1287                           ;doprnt.c: 540: {
  1288                           ;doprnt.c: 541: ((*sp++ = (c)));
  1289  000644  C02D  FFD9         	movff	sprintf@sp,fsr2l
  1290  000648  C02E  FFDA         	movff	sprintf@sp+1,fsr2h
  1291  00064C  C041  FFDF         	movff	sprintf@c,indf2
  1292  000650  4A2D               	infsnz	sprintf@sp,f,c
  1293  000652  2A2E               	incf	sprintf@sp+1,f,c
  1294                           
  1295                           ;doprnt.c: 542: continue;
  1296  000654  D0D4               	goto	l1248
  1297  000656                     l1188:
  1298                           
  1299                           ;doprnt.c: 543: }
  1300                           ;doprnt.c: 546: width = 0;
  1301  000656  0E00               	movlw	0
  1302  000658  6E40               	movwf	sprintf@width+1,c
  1303  00065A  0E00               	movlw	0
  1304  00065C  6E3F               	movwf	sprintf@width,c
  1305                           
  1306                           ;doprnt.c: 548: flag = 0;
  1307  00065E  0E00               	movlw	0
  1308  000660  6E39               	movwf	sprintf@flag,c
  1309                           
  1310                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1311  000662  C02F  FFF6         	movff	sprintf@f,tblptrl
  1312  000666  C030  FFF7         	movff	sprintf@f+1,tblptrh
  1313  00066A                     	if	0	;tblptru may be non-zero
  1314  00066A                     	endif
  1315  00066A                     	if	0	;tblptru may be non-zero
  1316  00066A                     	endif
  1317  00066A  0008               	tblrd		*
  1318  00066C  50F5               	movf	tablat,w,c
  1319  00066E  EC5F  F006         	call	_isdigit
  1320  000672  A0D8               	btfss	status,0,c
  1321  000674  D036               	goto	l1206
  1322                           
  1323                           ;doprnt.c: 598: width = 0;
  1324  000676  0E00               	movlw	0
  1325  000678  6E40               	movwf	sprintf@width+1,c
  1326  00067A  0E00               	movlw	0
  1327  00067C  6E3F               	movwf	sprintf@width,c
  1328  00067E                     l1194:
  1329                           
  1330                           ;doprnt.c: 600: width *= 10;
  1331  00067E  C03F  F020         	movff	sprintf@width,___wmul@multiplier
  1332  000682  C040  F021         	movff	sprintf@width+1,___wmul@multiplier+1
  1333  000686  0E00               	movlw	0
  1334  000688  6E23               	movwf	___wmul@multiplicand+1,c
  1335  00068A  0E0A               	movlw	10
  1336  00068C  6E22               	movwf	___wmul@multiplicand,c
  1337  00068E  EC4C  F006         	call	___wmul	;wreg free
  1338  000692  C020  F03F         	movff	?___wmul,sprintf@width
  1339  000696  C021  F040         	movff	?___wmul+1,sprintf@width+1
  1340                           
  1341                           ;doprnt.c: 601: width += *f++ - '0';
  1342  00069A  0ED0               	movlw	208
  1343  00069C  6E35               	movwf	??_sprintf& (0+255),c
  1344  00069E  0EFF               	movlw	255
  1345  0006A0  6E36               	movwf	(??_sprintf+1)& (0+255),c
  1346  0006A2  C02F  FFF6         	movff	sprintf@f,tblptrl
  1347  0006A6  C030  FFF7         	movff	sprintf@f+1,tblptrh
  1348  0006AA                     	if	0	;tblptru may be non-zero
  1349  0006AA                     	endif
  1350  0006AA                     	if	0	;tblptru may be non-zero
  1351  0006AA                     	endif
  1352  0006AA  0008               	tblrd		*
  1353  0006AC  50F5               	movf	tablat,w,c
  1354  0006AE  6E37               	movwf	(??_sprintf+2)& (0+255),c
  1355  0006B0  6A38               	clrf	(??_sprintf+3)& (0+255),c
  1356  0006B2  5035               	movf	??_sprintf,w,c
  1357  0006B4  2637               	addwf	??_sprintf+2,f,c
  1358  0006B6  5036               	movf	??_sprintf+1,w,c
  1359  0006B8  2238               	addwfc	??_sprintf+3,f,c
  1360  0006BA  5037               	movf	??_sprintf+2,w,c
  1361  0006BC  263F               	addwf	sprintf@width,f,c
  1362  0006BE  5038               	movf	??_sprintf+3,w,c
  1363  0006C0  2240               	addwfc	sprintf@width+1,f,c
  1364  0006C2  4A2F               	infsnz	sprintf@f,f,c
  1365  0006C4  2A30               	incf	sprintf@f+1,f,c
  1366                           
  1367                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1368  0006C6  C02F  FFF6         	movff	sprintf@f,tblptrl
  1369  0006CA  C030  FFF7         	movff	sprintf@f+1,tblptrh
  1370  0006CE                     	if	0	;tblptru may be non-zero
  1371  0006CE                     	endif
  1372  0006CE                     	if	0	;tblptru may be non-zero
  1373  0006CE                     	endif
  1374  0006CE  0008               	tblrd		*
  1375  0006D0  50F5               	movf	tablat,w,c
  1376  0006D2  EC5F  F006         	call	_isdigit
  1377  0006D6  A0D8               	btfss	status,0,c
  1378  0006D8  D004               	goto	l1206
  1379  0006DA  D7D1               	goto	l1194
  1380  0006DC                     l1202:
  1381                           
  1382                           ;doprnt.c: 818: flag |= 0xC0;
  1383  0006DC  0EC0               	movlw	192
  1384  0006DE  1239               	iorwf	sprintf@flag,f,c
  1385                           
  1386                           ;doprnt.c: 822: }
  1387                           
  1388                           ;doprnt.c: 819: break;
  1389  0006E0  D011               	goto	l1208
  1390  0006E2                     l1206:
  1391  0006E2  C02F  FFF6         	movff	sprintf@f,tblptrl
  1392  0006E6  C030  FFF7         	movff	sprintf@f+1,tblptrh
  1393  0006EA  4A2F               	infsnz	sprintf@f,f,c
  1394  0006EC  2A30               	incf	sprintf@f+1,f,c
  1395  0006EE                     	if	0	;tblptru may be non-zero
  1396  0006EE                     	endif
  1397  0006EE                     	if	0	;tblptru may be non-zero
  1398  0006EE                     	endif
  1399  0006EE  0008               	tblrd		*
  1400  0006F0  CFF5 F041          	movff	tablat,sprintf@c
  1401  0006F4  5041               	movf	sprintf@c,w,c
  1402                           
  1403                           ; Switch size 1, requested type "space"
  1404                           ; Number of cases is 2, Range of values is 0 to 117
  1405                           ; switch strategies available:
  1406                           ; Name         Instructions Cycles
  1407                           ; simple_byte            7     4 (average)
  1408                           ;	Chosen strategy is simple_byte
  1409  0006F6  0A00               	xorlw	0	; case 0
  1410  0006F8  B4D8               	btfsc	status,2,c
  1411  0006FA  D08D               	goto	l1250
  1412  0006FC  0A75               	xorlw	117	; case 117
  1413  0006FE  B4D8               	btfsc	status,2,c
  1414  000700  D7ED               	goto	l1202
  1415  000702  D07D               	goto	l1248
  1416  000704                     l1208:
  1417                           
  1418                           ;doprnt.c: 1273: {
  1419                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1420  000704  C03A  FFD9         	movff	sprintf@ap,fsr2l
  1421  000708  C03B  FFDA         	movff	sprintf@ap+1,fsr2h
  1422  00070C  CFDE F03C          	movff	postinc2,sprintf@val
  1423  000710  CFDD F03D          	movff	postdec2,sprintf@val+1
  1424  000714  0E02               	movlw	2
  1425  000716  263A               	addwf	sprintf@ap,f,c
  1426  000718  0E00               	movlw	0
  1427  00071A  223B               	addwfc	sprintf@ap+1,f,c
  1428                           
  1429                           ;doprnt.c: 1287: }
  1430                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1431  00071C  0E01               	movlw	1
  1432  00071E  6E41               	movwf	sprintf@c,c
  1433  000720                     l1214:
  1434  000720  0E05               	movlw	5
  1435  000722  1841               	xorwf	sprintf@c,w,c
  1436  000724  B4D8               	btfsc	status,2,c
  1437  000726  D012               	goto	l1226
  1438                           
  1439                           ;doprnt.c: 1306: if(val < dpowers[c])
  1440  000728  5041               	movf	sprintf@c,w,c
  1441  00072A  0D02               	mullw	2
  1442  00072C  0E01               	movlw	low _dpowers
  1443  00072E  24F3               	addwf	prodl,w,c
  1444  000730  6EF6               	movwf	tblptrl,c
  1445  000732  0E06               	movlw	high _dpowers
  1446  000734  20F4               	addwfc	prodh,w,c
  1447  000736  6EF7               	movwf	tblptrh,c
  1448  000738                     	if	0	;There are less than 3 active tblptr bytes
  1449  000738                     	endif
  1450  000738  0009               	tblrd		*+
  1451  00073A  50F5               	movf	tablat,w,c
  1452  00073C  5C3C               	subwf	sprintf@val,w,c
  1453  00073E  0009               	tblrd		*+
  1454  000740  50F5               	movf	tablat,w,c
  1455  000742  583D               	subwfb	sprintf@val+1,w,c
  1456  000744  A0D8               	btfss	status,0,c
  1457  000746  D002               	goto	l1226
  1458                           
  1459                           ;doprnt.c: 1307: break;
  1460  000748  2A41               	incf	sprintf@c,f,c
  1461  00074A  D7EA               	goto	l1214
  1462  00074C                     l1226:
  1463                           
  1464                           ;doprnt.c: 1381: if(width > c)
  1465  00074C  0E80               	movlw	128
  1466  00074E  BE41               	btfsc	sprintf@c,7,c
  1467  000750  0E7F               	movlw	127
  1468  000752  6E35               	movwf	??_sprintf& (0+255),c
  1469  000754  503F               	movf	sprintf@width,w,c
  1470  000756  5C41               	subwf	sprintf@c,w,c
  1471  000758  5040               	movf	sprintf@width+1,w,c
  1472  00075A  0A80               	xorlw	128
  1473  00075C  5835               	subwfb	??_sprintf& (0+255),w,c
  1474  00075E  B0D8               	btfsc	status,0,c
  1475  000760  D007               	goto	l1230
  1476                           
  1477                           ;doprnt.c: 1382: width -= c;
  1478  000762  5041               	movf	sprintf@c,w,c
  1479  000764  5E3F               	subwf	sprintf@width,f,c
  1480  000766  0E00               	movlw	0
  1481  000768  BE41               	btfsc	sprintf@c,7,c
  1482  00076A  0EFF               	movlw	255
  1483  00076C  5A40               	subwfb	sprintf@width+1,f,c
  1484  00076E  D004               	goto	l1232
  1485  000770                     l1230:
  1486                           
  1487                           ;doprnt.c: 1383: else
  1488                           ;doprnt.c: 1384: width = 0;
  1489  000770  0E00               	movlw	0
  1490  000772  6E40               	movwf	sprintf@width+1,c
  1491  000774  0E00               	movlw	0
  1492  000776  6E3F               	movwf	sprintf@width,c
  1493  000778                     l1232:
  1494                           
  1495                           ;doprnt.c: 1422: {
  1496                           ;doprnt.c: 1424: if(width
  1497                           ;doprnt.c: 1428: )
  1498  000778  503F               	movf	sprintf@width,w,c
  1499  00077A  1040               	iorwf	sprintf@width+1,w,c
  1500  00077C  B4D8               	btfsc	status,2,c
  1501  00077E  D00F               	goto	l144
  1502  000780                     l1234:
  1503                           
  1504                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1505  000780  C02D  FFD9         	movff	sprintf@sp,fsr2l
  1506  000784  C02E  FFDA         	movff	sprintf@sp+1,fsr2h
  1507  000788  0E20               	movlw	32
  1508  00078A  6EDF               	movwf	indf2,c
  1509  00078C  4A2D               	infsnz	sprintf@sp,f,c
  1510  00078E  2A2E               	incf	sprintf@sp+1,f,c
  1511                           
  1512                           ;doprnt.c: 1431: while(--width);
  1513  000790  063F               	decf	sprintf@width,f,c
  1514  000792  A0D8               	btfss	status,0,c
  1515  000794  0640               	decf	sprintf@width+1,f,c
  1516  000796  503F               	movf	sprintf@width,w,c
  1517  000798  1040               	iorwf	sprintf@width+1,w,c
  1518  00079A  A4D8               	btfss	status,2,c
  1519  00079C  D7F1               	goto	l1234
  1520  00079E                     l144:
  1521                           
  1522                           ;doprnt.c: 1469: }
  1523                           ;doprnt.c: 1472: prec = c;
  1524  00079E  C041  F03E         	movff	sprintf@c,sprintf@prec
  1525                           
  1526                           ;doprnt.c: 1474: while(prec--) {
  1527  0007A2  D029               	goto	l1246
  1528  0007A4                     l1240:
  1529                           
  1530                           ;doprnt.c: 1478: {
  1531                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1532  0007A4  503E               	movf	sprintf@prec,w,c
  1533  0007A6  0D02               	mullw	2
  1534  0007A8  0E01               	movlw	low _dpowers
  1535  0007AA  24F3               	addwf	prodl,w,c
  1536  0007AC  6EF6               	movwf	tblptrl,c
  1537  0007AE  0E06               	movlw	high _dpowers
  1538  0007B0  20F4               	addwfc	prodh,w,c
  1539  0007B2  6EF7               	movwf	tblptrh,c
  1540  0007B4                     	if	0	;There are less than 3 active tblptr bytes
  1541  0007B4                     	endif
  1542  0007B4  0009               	tblrd		*+
  1543  0007B6  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1544  0007BA  000A               	tblrd		*-
  1545  0007BC  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1546  0007C0  C03C  F020         	movff	sprintf@val,___lwdiv@dividend
  1547  0007C4  C03D  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1548  0007C8  EC95  F005         	call	___lwdiv	;wreg free
  1549  0007CC  C020  F027         	movff	?___lwdiv,___lwmod@dividend
  1550  0007D0  C021  F028         	movff	?___lwdiv+1,___lwmod@dividend+1
  1551  0007D4  0E00               	movlw	0
  1552  0007D6  6E2A               	movwf	___lwmod@divisor+1,c
  1553  0007D8  0E0A               	movlw	10
  1554  0007DA  6E29               	movwf	___lwmod@divisor,c
  1555  0007DC  ECBE  F005         	call	___lwmod	;wreg free
  1556  0007E0  5027               	movf	?___lwmod,w,c
  1557  0007E2  0F30               	addlw	48
  1558  0007E4  6E41               	movwf	sprintf@c,c
  1559                           
  1560                           ;doprnt.c: 1523: }
  1561                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1562  0007E6  C02D  FFD9         	movff	sprintf@sp,fsr2l
  1563  0007EA  C02E  FFDA         	movff	sprintf@sp+1,fsr2h
  1564  0007EE  C041  FFDF         	movff	sprintf@c,indf2
  1565  0007F2  4A2D               	infsnz	sprintf@sp,f,c
  1566  0007F4  2A2E               	incf	sprintf@sp+1,f,c
  1567  0007F6                     l1246:
  1568  0007F6  063E               	decf	sprintf@prec,f,c
  1569  0007F8  283E               	incf	sprintf@prec,w,c
  1570  0007FA  A4D8               	btfss	status,2,c
  1571  0007FC  D7D3               	goto	l1240
  1572  0007FE                     l1248:
  1573  0007FE  C02F  FFF6         	movff	sprintf@f,tblptrl
  1574  000802  C030  FFF7         	movff	sprintf@f+1,tblptrh
  1575  000806  4A2F               	infsnz	sprintf@f,f,c
  1576  000808  2A30               	incf	sprintf@f+1,f,c
  1577  00080A                     	if	0	;tblptru may be non-zero
  1578  00080A                     	endif
  1579  00080A                     	if	0	;tblptru may be non-zero
  1580  00080A                     	endif
  1581  00080A  0008               	tblrd		*
  1582  00080C  CFF5 F041          	movff	tablat,sprintf@c
  1583  000810  5041               	movf	sprintf@c,w,c
  1584  000812  A4D8               	btfss	status,2,c
  1585  000814  D713               	goto	l1182
  1586  000816                     l1250:
  1587                           
  1588                           ;doprnt.c: 1538: *sp = 0;
  1589  000816  C02D  FFD9         	movff	sprintf@sp,fsr2l
  1590  00081A  C02E  FFDA         	movff	sprintf@sp+1,fsr2h
  1591  00081E  0E00               	movlw	0
  1592  000820  6EDF               	movwf	indf2,c
  1593  000822  0012               	return	
  1594  000824                     __end_of_sprintf:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           intcon	equ	0xFF2
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           indf1	equ	0xFE7
  1606                           postdec1	equ	0xFE5
  1607                           fsr1h	equ	0xFE2
  1608                           fsr1l	equ	0xFE1
  1609                           indf2	equ	0xFDF
  1610                           postinc2	equ	0xFDE
  1611                           postdec2	equ	0xFDD
  1612                           fsr2h	equ	0xFDA
  1613                           fsr2l	equ	0xFD9
  1614                           status	equ	0xFD8
  1615                           
  1616 ;; *************** function _isdigit *****************
  1617 ;; Defined at:
  1618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  c               1    wreg     unsigned char 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  c               1   33[COMRAM] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;		None               void
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1632 ;;      Params:         0       0       0       0       0       0       0
  1633 ;;      Locals:         2       0       0       0       0       0       0
  1634 ;;      Temps:          1       0       0       0       0       0       0
  1635 ;;      Totals:         3       0       0       0       0       0       0
  1636 ;;Total ram usage:        3 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_sprintf
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text8
  1647  000CBE                     __ptext8:
  1648                           	opt stack 0
  1649  000CBE                     _isdigit:
  1650                           	opt stack 27
  1651                           
  1652                           ;incstack = 0
  1653                           ;isdigit@c stored from wreg
  1654  000CBE  6E22               	movwf	isdigit@c,c
  1655  000CC0  0E00               	movlw	0
  1656  000CC2  6E21               	movwf	_isdigit$1040,c
  1657  000CC4  0E3A               	movlw	58
  1658  000CC6  6022               	cpfslt	isdigit@c,c
  1659  000CC8  D005               	goto	l1092
  1660  000CCA  0E2F               	movlw	47
  1661  000CCC  6422               	cpfsgt	isdigit@c,c
  1662  000CCE  D002               	goto	l1092
  1663  000CD0  0E01               	movlw	1
  1664  000CD2  6E21               	movwf	_isdigit$1040,c
  1665  000CD4                     l1092:
  1666  000CD4  C021  F020         	movff	_isdigit$1040,??_isdigit
  1667  000CD8  3020               	rrcf	??_isdigit,w,c
  1668  000CDA  0012               	return	
  1669  000CDC                     __end_of_isdigit:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           prodh	equ	0xFF4
  1676                           prodl	equ	0xFF3
  1677                           intcon	equ	0xFF2
  1678                           postinc0	equ	0xFEE
  1679                           wreg	equ	0xFE8
  1680                           indf1	equ	0xFE7
  1681                           postdec1	equ	0xFE5
  1682                           fsr1h	equ	0xFE2
  1683                           fsr1l	equ	0xFE1
  1684                           indf2	equ	0xFDF
  1685                           postinc2	equ	0xFDE
  1686                           postdec2	equ	0xFDD
  1687                           fsr2h	equ	0xFDA
  1688                           fsr2l	equ	0xFD9
  1689                           status	equ	0xFD8
  1690                           
  1691 ;; *************** function ___wmul *****************
  1692 ;; Defined at:
  1693 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  multiplier      2   31[COMRAM] unsigned int 
  1696 ;;  multiplicand    2   33[COMRAM] unsigned int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  product         2   35[COMRAM] unsigned int 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2   31[COMRAM] unsigned int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0, prodl, prodh
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         4       0       0       0       0       0       0
  1709 ;;      Locals:         2       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0
  1711 ;;      Totals:         6       0       0       0       0       0       0
  1712 ;;Total ram usage:        6 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    2
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_sprintf
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text9
  1723  000C98                     __ptext9:
  1724                           	opt stack 0
  1725  000C98                     ___wmul:
  1726                           	opt stack 27
  1727                           
  1728                           ;incstack = 0
  1729  000C98  5020               	movf	___wmul@multiplier,w,c
  1730  000C9A  0222               	mulwf	___wmul@multiplicand,c
  1731  000C9C  CFF3 F024          	movff	prodl,___wmul@product
  1732  000CA0  CFF4 F025          	movff	prodh,___wmul@product+1
  1733  000CA4  5020               	movf	___wmul@multiplier,w,c
  1734  000CA6  0223               	mulwf	___wmul@multiplicand+1,c
  1735  000CA8  50F3               	movf	prodl,w,c
  1736  000CAA  2625               	addwf	___wmul@product+1,f,c
  1737  000CAC  5021               	movf	___wmul@multiplier+1,w,c
  1738  000CAE  0222               	mulwf	___wmul@multiplicand,c
  1739  000CB0  50F3               	movf	prodl,w,c
  1740  000CB2  2625               	addwf	___wmul@product+1,f,c
  1741  000CB4  C024  F020         	movff	___wmul@product,?___wmul
  1742  000CB8  C025  F021         	movff	___wmul@product+1,?___wmul+1
  1743  000CBC  0012               	return	
  1744  000CBE                     __end_of___wmul:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           indf1	equ	0xFE7
  1756                           postdec1	equ	0xFE5
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           postinc2	equ	0xFDE
  1761                           postdec2	equ	0xFDD
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function ___lwmod *****************
  1767 ;; Defined at:
  1768 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  dividend        2   38[COMRAM] unsigned int 
  1771 ;;  divisor         2   40[COMRAM] unsigned int 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  counter         1   42[COMRAM] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  2   38[COMRAM] unsigned int 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1783 ;;      Params:         4       0       0       0       0       0       0
  1784 ;;      Locals:         1       0       0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0
  1786 ;;      Totals:         5       0       0       0       0       0       0
  1787 ;;Total ram usage:        5 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    2
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_sprintf
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text10
  1798  000B7C                     __ptext10:
  1799                           	opt stack 0
  1800  000B7C                     ___lwmod:
  1801                           	opt stack 27
  1802                           
  1803                           ;incstack = 0
  1804  000B7C  5029               	movf	___lwmod@divisor,w,c
  1805  000B7E  102A               	iorwf	___lwmod@divisor+1,w,c
  1806  000B80  B4D8               	btfsc	status,2,c
  1807  000B82  D018               	goto	l569
  1808  000B84  0E01               	movlw	1
  1809  000B86  6E2B               	movwf	___lwmod@counter,c
  1810  000B88  D004               	goto	l1140
  1811  000B8A                     l1138:
  1812  000B8A  90D8               	bcf	status,0,c
  1813  000B8C  3629               	rlcf	___lwmod@divisor,f,c
  1814  000B8E  362A               	rlcf	___lwmod@divisor+1,f,c
  1815  000B90  2A2B               	incf	___lwmod@counter,f,c
  1816  000B92                     l1140:
  1817  000B92  AE2A               	btfss	___lwmod@divisor+1,7,c
  1818  000B94  D7FA               	goto	l1138
  1819  000B96                     l1142:
  1820  000B96  5029               	movf	___lwmod@divisor,w,c
  1821  000B98  5C27               	subwf	___lwmod@dividend,w,c
  1822  000B9A  502A               	movf	___lwmod@divisor+1,w,c
  1823  000B9C  5828               	subwfb	___lwmod@dividend+1,w,c
  1824  000B9E  A0D8               	btfss	status,0,c
  1825  000BA0  D004               	goto	l1146
  1826  000BA2  5029               	movf	___lwmod@divisor,w,c
  1827  000BA4  5E27               	subwf	___lwmod@dividend,f,c
  1828  000BA6  502A               	movf	___lwmod@divisor+1,w,c
  1829  000BA8  5A28               	subwfb	___lwmod@dividend+1,f,c
  1830  000BAA                     l1146:
  1831  000BAA  90D8               	bcf	status,0,c
  1832  000BAC  322A               	rrcf	___lwmod@divisor+1,f,c
  1833  000BAE  3229               	rrcf	___lwmod@divisor,f,c
  1834  000BB0  2E2B               	decfsz	___lwmod@counter,f,c
  1835  000BB2  D7F1               	goto	l1142
  1836  000BB4                     l569:
  1837  000BB4  C027  F027         	movff	___lwmod@dividend,?___lwmod
  1838  000BB8  C028  F028         	movff	___lwmod@dividend+1,?___lwmod+1
  1839  000BBC  0012               	return		;funcret
  1840  000BBE                     __end_of___lwmod:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           postdec1	equ	0xFE5
  1853                           fsr1h	equ	0xFE2
  1854                           fsr1l	equ	0xFE1
  1855                           indf2	equ	0xFDF
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function ___lwdiv *****************
  1863 ;; Defined at:
  1864 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  dividend        2   31[COMRAM] unsigned int 
  1867 ;;  divisor         2   33[COMRAM] unsigned int 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  quotient        2   35[COMRAM] unsigned int 
  1870 ;;  counter         1   37[COMRAM] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  2   31[COMRAM] unsigned int 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1880 ;;      Params:         4       0       0       0       0       0       0
  1881 ;;      Locals:         3       0       0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0       0       0
  1883 ;;      Totals:         7       0       0       0       0       0       0
  1884 ;;Total ram usage:        7 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    2
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_sprintf
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text11
  1895  000B2A                     __ptext11:
  1896                           	opt stack 0
  1897  000B2A                     ___lwdiv:
  1898                           	opt stack 27
  1899                           
  1900                           ;incstack = 0
  1901  000B2A  0E00               	movlw	0
  1902  000B2C  6E25               	movwf	___lwdiv@quotient+1,c
  1903  000B2E  0E00               	movlw	0
  1904  000B30  6E24               	movwf	___lwdiv@quotient,c
  1905  000B32  5022               	movf	___lwdiv@divisor,w,c
  1906  000B34  1023               	iorwf	___lwdiv@divisor+1,w,c
  1907  000B36  B4D8               	btfsc	status,2,c
  1908  000B38  D01C               	goto	l559
  1909  000B3A  0E01               	movlw	1
  1910  000B3C  6E26               	movwf	___lwdiv@counter,c
  1911  000B3E  D004               	goto	l1120
  1912  000B40                     l1118:
  1913  000B40  90D8               	bcf	status,0,c
  1914  000B42  3622               	rlcf	___lwdiv@divisor,f,c
  1915  000B44  3623               	rlcf	___lwdiv@divisor+1,f,c
  1916  000B46  2A26               	incf	___lwdiv@counter,f,c
  1917  000B48                     l1120:
  1918  000B48  AE23               	btfss	___lwdiv@divisor+1,7,c
  1919  000B4A  D7FA               	goto	l1118
  1920  000B4C                     l1122:
  1921  000B4C  90D8               	bcf	status,0,c
  1922  000B4E  3624               	rlcf	___lwdiv@quotient,f,c
  1923  000B50  3625               	rlcf	___lwdiv@quotient+1,f,c
  1924  000B52  5022               	movf	___lwdiv@divisor,w,c
  1925  000B54  5C20               	subwf	___lwdiv@dividend,w,c
  1926  000B56  5023               	movf	___lwdiv@divisor+1,w,c
  1927  000B58  5821               	subwfb	___lwdiv@dividend+1,w,c
  1928  000B5A  A0D8               	btfss	status,0,c
  1929  000B5C  D005               	goto	l1130
  1930  000B5E  5022               	movf	___lwdiv@divisor,w,c
  1931  000B60  5E20               	subwf	___lwdiv@dividend,f,c
  1932  000B62  5023               	movf	___lwdiv@divisor+1,w,c
  1933  000B64  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1934  000B66  8024               	bsf	___lwdiv@quotient,0,c
  1935  000B68                     l1130:
  1936  000B68  90D8               	bcf	status,0,c
  1937  000B6A  3223               	rrcf	___lwdiv@divisor+1,f,c
  1938  000B6C  3222               	rrcf	___lwdiv@divisor,f,c
  1939  000B6E  2E26               	decfsz	___lwdiv@counter,f,c
  1940  000B70  D7ED               	goto	l1122
  1941  000B72                     l559:
  1942  000B72  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
  1943  000B76  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1944  000B7A  0012               	return		;funcret
  1945  000B7C                     __end_of___lwdiv:
  1946                           	opt stack 0
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           prodh	equ	0xFF4
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           indf1	equ	0xFE7
  1957                           postdec1	equ	0xFE5
  1958                           fsr1h	equ	0xFE2
  1959                           fsr1l	equ	0xFE1
  1960                           indf2	equ	0xFDF
  1961                           postinc2	equ	0xFDE
  1962                           postdec2	equ	0xFDD
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function ___lldiv *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  dividend        4   31[COMRAM] unsigned long 
  1972 ;;  divisor         4   35[COMRAM] unsigned long 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  quotient        4   39[COMRAM] unsigned long 
  1975 ;;  counter         1   43[COMRAM] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  4   31[COMRAM] unsigned long 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1985 ;;      Params:         8       0       0       0       0       0       0
  1986 ;;      Locals:         5       0       0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0
  1988 ;;      Totals:        13       0       0       0       0       0       0
  1989 ;;Total ram usage:       13 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text12
  2000  0009F0                     __ptext12:
  2001                           	opt stack 0
  2002  0009F0                     ___lldiv:
  2003                           	opt stack 28
  2004                           
  2005                           ;incstack = 0
  2006  0009F0  0E00               	movlw	0
  2007  0009F2  6E28               	movwf	___lldiv@quotient,c
  2008  0009F4  0E00               	movlw	0
  2009  0009F6  6E29               	movwf	___lldiv@quotient+1,c
  2010  0009F8  0E00               	movlw	0
  2011  0009FA  6E2A               	movwf	___lldiv@quotient+2,c
  2012  0009FC  0E00               	movlw	0
  2013  0009FE  6E2B               	movwf	___lldiv@quotient+3,c
  2014  000A00  5024               	movf	___lldiv@divisor,w,c
  2015  000A02  1025               	iorwf	___lldiv@divisor+1,w,c
  2016  000A04  1026               	iorwf	___lldiv@divisor+2,w,c
  2017  000A06  1027               	iorwf	___lldiv@divisor+3,w,c
  2018  000A08  B4D8               	btfsc	status,2,c
  2019  000A0A  D02A               	goto	l506
  2020  000A0C  0E01               	movlw	1
  2021  000A0E  6E2C               	movwf	___lldiv@counter,c
  2022  000A10  D006               	goto	l1270
  2023  000A12                     l1268:
  2024  000A12  90D8               	bcf	status,0,c
  2025  000A14  3624               	rlcf	___lldiv@divisor,f,c
  2026  000A16  3625               	rlcf	___lldiv@divisor+1,f,c
  2027  000A18  3626               	rlcf	___lldiv@divisor+2,f,c
  2028  000A1A  3627               	rlcf	___lldiv@divisor+3,f,c
  2029  000A1C  2A2C               	incf	___lldiv@counter,f,c
  2030  000A1E                     l1270:
  2031  000A1E  AE27               	btfss	___lldiv@divisor+3,7,c
  2032  000A20  D7F8               	goto	l1268
  2033  000A22                     l1272:
  2034  000A22  90D8               	bcf	status,0,c
  2035  000A24  3628               	rlcf	___lldiv@quotient,f,c
  2036  000A26  3629               	rlcf	___lldiv@quotient+1,f,c
  2037  000A28  362A               	rlcf	___lldiv@quotient+2,f,c
  2038  000A2A  362B               	rlcf	___lldiv@quotient+3,f,c
  2039  000A2C  5024               	movf	___lldiv@divisor,w,c
  2040  000A2E  5C20               	subwf	___lldiv@dividend,w,c
  2041  000A30  5025               	movf	___lldiv@divisor+1,w,c
  2042  000A32  5821               	subwfb	___lldiv@dividend+1,w,c
  2043  000A34  5026               	movf	___lldiv@divisor+2,w,c
  2044  000A36  5822               	subwfb	___lldiv@dividend+2,w,c
  2045  000A38  5027               	movf	___lldiv@divisor+3,w,c
  2046  000A3A  5823               	subwfb	___lldiv@dividend+3,w,c
  2047  000A3C  A0D8               	btfss	status,0,c
  2048  000A3E  D009               	goto	l1280
  2049  000A40  5024               	movf	___lldiv@divisor,w,c
  2050  000A42  5E20               	subwf	___lldiv@dividend,f,c
  2051  000A44  5025               	movf	___lldiv@divisor+1,w,c
  2052  000A46  5A21               	subwfb	___lldiv@dividend+1,f,c
  2053  000A48  5026               	movf	___lldiv@divisor+2,w,c
  2054  000A4A  5A22               	subwfb	___lldiv@dividend+2,f,c
  2055  000A4C  5027               	movf	___lldiv@divisor+3,w,c
  2056  000A4E  5A23               	subwfb	___lldiv@dividend+3,f,c
  2057  000A50  8028               	bsf	___lldiv@quotient,0,c
  2058  000A52                     l1280:
  2059  000A52  90D8               	bcf	status,0,c
  2060  000A54  3227               	rrcf	___lldiv@divisor+3,f,c
  2061  000A56  3226               	rrcf	___lldiv@divisor+2,f,c
  2062  000A58  3225               	rrcf	___lldiv@divisor+1,f,c
  2063  000A5A  3224               	rrcf	___lldiv@divisor,f,c
  2064  000A5C  2E2C               	decfsz	___lldiv@counter,f,c
  2065  000A5E  D7E1               	goto	l1272
  2066  000A60                     l506:
  2067  000A60  C028  F020         	movff	___lldiv@quotient,?___lldiv
  2068  000A64  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  2069  000A68  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  2070  000A6C  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  2071  000A70  0012               	return		;funcret
  2072  000A72                     __end_of___lldiv:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           prodh	equ	0xFF4
  2079                           prodl	equ	0xFF3
  2080                           intcon	equ	0xFF2
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           indf1	equ	0xFE7
  2084                           postdec1	equ	0xFE5
  2085                           fsr1h	equ	0xFE2
  2086                           fsr1l	equ	0xFE1
  2087                           indf2	equ	0xFDF
  2088                           postinc2	equ	0xFDE
  2089                           postdec2	equ	0xFDD
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _low_isr *****************
  2095 ;; Defined at:
  2096 ;;		line 101 in file "main.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         0       0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0
  2112 ;;      Temps:         17       0       0       0       0       0       0
  2113 ;;      Totals:        17       0       0       0       0       0       0
  2114 ;;Total ram usage:       17 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		Interrupt level 1
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	intcodelo
  2125  000018                     __pintcodelo:
  2126                           	opt stack 0
  2127  000018                     _low_isr:
  2128                           	opt stack 27
  2129                           
  2130                           ;incstack = 0
  2131  000018  8053               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2132  00001A  CFD8 F00F          	movff	status,??_low_isr
  2133  00001E  CFE8 F010          	movff	wreg,??_low_isr+1
  2134  000022  CFE0 F011          	movff	bsr,??_low_isr+2
  2135  000026  CFFA F012          	movff	pclath,??_low_isr+3
  2136  00002A  CFFB F013          	movff	pclatu,??_low_isr+4
  2137  00002E  CFE9 F014          	movff	fsr0l,??_low_isr+5
  2138  000032  CFEA F015          	movff	fsr0h,??_low_isr+6
  2139  000036  CFE1 F016          	movff	fsr1l,??_low_isr+7
  2140  00003A  CFE2 F017          	movff	fsr1h,??_low_isr+8
  2141  00003E  CFD9 F018          	movff	fsr2l,??_low_isr+9
  2142  000042  CFDA F019          	movff	fsr2h,??_low_isr+10
  2143  000046  CFF3 F01A          	movff	prodl,??_low_isr+11
  2144  00004A  CFF4 F01B          	movff	prodh,??_low_isr+12
  2145  00004E  CFF6 F01C          	movff	tblptrl,??_low_isr+13
  2146  000052  CFF7 F01D          	movff	tblptrh,??_low_isr+14
  2147  000056  CFF8 F01E          	movff	tblptru,??_low_isr+15
  2148  00005A  CFF5 F01F          	movff	tablat,??_low_isr+16
  2149                           
  2150                           ;main.c: 102: INTCONbits.GIEH = 0;
  2151  00005E  9EF2               	bcf	intcon,7,c	;volatile
  2152                           
  2153                           ;main.c: 103: if(PIR2bits.TMR3IF == 1){
  2154  000060  A2A1               	btfss	4001,1,c	;volatile
  2155  000062  D007               	goto	i1l1056
  2156                           
  2157                           ;main.c: 104: overflow_tmr3++;
  2158  000064  0E01               	movlw	1
  2159  000066  264A               	addwf	_overflow_tmr3,f,c
  2160  000068  0E00               	movlw	0
  2161  00006A  224B               	addwfc	_overflow_tmr3+1,f,c
  2162  00006C  224C               	addwfc	_overflow_tmr3+2,f,c
  2163  00006E  224D               	addwfc	_overflow_tmr3+3,f,c
  2164                           
  2165                           ;main.c: 105: PIR2bits.TMR3IF = 0;
  2166  000070  92A1               	bcf	4001,1,c	;volatile
  2167  000072                     i1l1056:
  2168                           
  2169                           ;main.c: 106: }
  2170                           ;main.c: 107: INTCONbits.GIEH = 1;
  2171  000072  8EF2               	bsf	intcon,7,c	;volatile
  2172  000074  C01F  FFF5         	movff	??_low_isr+16,tablat
  2173  000078  C01E  FFF8         	movff	??_low_isr+15,tblptru
  2174  00007C  C01D  FFF7         	movff	??_low_isr+14,tblptrh
  2175  000080  C01C  FFF6         	movff	??_low_isr+13,tblptrl
  2176  000084  C01B  FFF4         	movff	??_low_isr+12,prodh
  2177  000088  C01A  FFF3         	movff	??_low_isr+11,prodl
  2178  00008C  C019  FFDA         	movff	??_low_isr+10,fsr2h
  2179  000090  C018  FFD9         	movff	??_low_isr+9,fsr2l
  2180  000094  C017  FFE2         	movff	??_low_isr+8,fsr1h
  2181  000098  C016  FFE1         	movff	??_low_isr+7,fsr1l
  2182  00009C  C015  FFEA         	movff	??_low_isr+6,fsr0h
  2183  0000A0  C014  FFE9         	movff	??_low_isr+5,fsr0l
  2184  0000A4  C013  FFFB         	movff	??_low_isr+4,pclatu
  2185  0000A8  C012  FFFA         	movff	??_low_isr+3,pclath
  2186  0000AC  C011  FFE0         	movff	??_low_isr+2,bsr
  2187  0000B0  C010  FFE8         	movff	??_low_isr+1,wreg
  2188  0000B4  C00F  FFD8         	movff	??_low_isr,status
  2189  0000B8  9053               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2190  0000BA  0010               	retfie	
  2191  0000BC                     __end_of_low_isr:
  2192                           	opt stack 0
  2193                           pclatu	equ	0xFFB
  2194                           pclath	equ	0xFFA
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           prodh	equ	0xFF4
  2200                           prodl	equ	0xFF3
  2201                           intcon	equ	0xFF2
  2202                           postinc0	equ	0xFEE
  2203                           fsr0h	equ	0xFEA
  2204                           fsr0l	equ	0xFE9
  2205                           wreg	equ	0xFE8
  2206                           indf1	equ	0xFE7
  2207                           postdec1	equ	0xFE5
  2208                           fsr1h	equ	0xFE2
  2209                           fsr1l	equ	0xFE1
  2210                           bsr	equ	0xFE0
  2211                           indf2	equ	0xFDF
  2212                           postinc2	equ	0xFDE
  2213                           postdec2	equ	0xFDD
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _high_isr *****************
  2219 ;; Defined at:
  2220 ;;		line 88 in file "main.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2234 ;;      Params:         0       0       0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0       0       0
  2236 ;;      Temps:         14       0       0       0       0       0       0
  2237 ;;      Totals:        14       0       0       0       0       0       0
  2238 ;;Total ram usage:       14 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		Interrupt level 2
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	intcode
  2248  000008                     __pintcode:
  2249                           	opt stack 0
  2250  000008                     _high_isr:
  2251                           	opt stack 27
  2252                           
  2253                           ;incstack = 0
  2254  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2255  00000A  EDA2  F004         	call	int_func,f	;refresh shadow registers
  2256                           pclatu	equ	0xFFB
  2257                           pclath	equ	0xFFA
  2258                           tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           prodh	equ	0xFF4
  2263                           prodl	equ	0xFF3
  2264                           intcon	equ	0xFF2
  2265                           postinc0	equ	0xFEE
  2266                           fsr0h	equ	0xFEA
  2267                           fsr0l	equ	0xFE9
  2268                           wreg	equ	0xFE8
  2269                           indf1	equ	0xFE7
  2270                           postdec1	equ	0xFE5
  2271                           fsr1h	equ	0xFE2
  2272                           fsr1l	equ	0xFE1
  2273                           bsr	equ	0xFE0
  2274                           indf2	equ	0xFDF
  2275                           postinc2	equ	0xFDE
  2276                           postdec2	equ	0xFDD
  2277                           fsr2h	equ	0xFDA
  2278                           fsr2l	equ	0xFD9
  2279                           status	equ	0xFD8
  2280                           
  2281                           	psect	intcode_body
  2282  000944                     __pintcode_body:
  2283                           	opt stack 27
  2284  000944                     int_func:
  2285                           	opt stack 27
  2286  000944  0006               	pop		; remove dummy address from shadow register refresh
  2287  000946  CFFA F001          	movff	pclath,??_high_isr
  2288  00094A  CFFB F002          	movff	pclatu,??_high_isr+1
  2289  00094E  CFE9 F003          	movff	fsr0l,??_high_isr+2
  2290  000952  CFEA F004          	movff	fsr0h,??_high_isr+3
  2291  000956  CFE1 F005          	movff	fsr1l,??_high_isr+4
  2292  00095A  CFE2 F006          	movff	fsr1h,??_high_isr+5
  2293  00095E  CFD9 F007          	movff	fsr2l,??_high_isr+6
  2294  000962  CFDA F008          	movff	fsr2h,??_high_isr+7
  2295  000966  CFF3 F009          	movff	prodl,??_high_isr+8
  2296  00096A  CFF4 F00A          	movff	prodh,??_high_isr+9
  2297  00096E  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  2298  000972  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  2299  000976  CFF8 F00D          	movff	tblptru,??_high_isr+12
  2300  00097A  CFF5 F00E          	movff	tablat,??_high_isr+13
  2301                           
  2302                           ;main.c: 89: INTCONbits.GIEH = 0;
  2303  00097E  9EF2               	bcf	intcon,7,c	;volatile
  2304                           
  2305                           ;main.c: 90: if(PIR2bits.CCP2IF == 1){
  2306  000980  A0A1               	btfss	4001,0,c	;volatile
  2307  000982  D017               	goto	i2l1048
  2308                           
  2309                           ;main.c: 91: cap_overflow_tmr3 = overflow_tmr3;
  2310  000984  C04A  F046         	movff	_overflow_tmr3,_cap_overflow_tmr3
  2311  000988  C04B  F047         	movff	_overflow_tmr3+1,_cap_overflow_tmr3+1
  2312  00098C  C04C  F048         	movff	_overflow_tmr3+2,_cap_overflow_tmr3+2
  2313  000990  C04D  F049         	movff	_overflow_tmr3+3,_cap_overflow_tmr3+3
  2314                           
  2315                           ;main.c: 92: captrue_value.ccpL = CCPR2L;
  2316  000994  CFBB F051          	movff	4027,_captrue_value	;volatile
  2317                           
  2318                           ;main.c: 93: captrue_value.ccpH = CCPR2H;
  2319  000998  CFBC F052          	movff	4028,_captrue_value+1	;volatile
  2320                           
  2321                           ;main.c: 94: overflow_tmr3 = 0;
  2322  00099C  0E00               	movlw	0
  2323  00099E  6E4A               	movwf	_overflow_tmr3,c
  2324  0009A0  0E00               	movlw	0
  2325  0009A2  6E4B               	movwf	_overflow_tmr3+1,c
  2326  0009A4  0E00               	movlw	0
  2327  0009A6  6E4C               	movwf	_overflow_tmr3+2,c
  2328  0009A8  0E00               	movlw	0
  2329  0009AA  6E4D               	movwf	_overflow_tmr3+3,c
  2330                           
  2331                           ;main.c: 95: new_time_bool = 1;
  2332  0009AC  0E01               	movlw	1
  2333  0009AE  6E50               	movwf	_new_time_bool,c
  2334                           
  2335                           ;main.c: 96: PIR2bits.CCP2IF = 0;
  2336  0009B0  90A1               	bcf	4001,0,c	;volatile
  2337  0009B2                     i2l1048:
  2338                           
  2339                           ;main.c: 97: }
  2340                           ;main.c: 98: INTCONbits.GIEH = 1;
  2341  0009B2  8EF2               	bsf	intcon,7,c	;volatile
  2342  0009B4  C00E  FFF5         	movff	??_high_isr+13,tablat
  2343  0009B8  C00D  FFF8         	movff	??_high_isr+12,tblptru
  2344  0009BC  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  2345  0009C0  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  2346  0009C4  C00A  FFF4         	movff	??_high_isr+9,prodh
  2347  0009C8  C009  FFF3         	movff	??_high_isr+8,prodl
  2348  0009CC  C008  FFDA         	movff	??_high_isr+7,fsr2h
  2349  0009D0  C007  FFD9         	movff	??_high_isr+6,fsr2l
  2350  0009D4  C006  FFE2         	movff	??_high_isr+5,fsr1h
  2351  0009D8  C005  FFE1         	movff	??_high_isr+4,fsr1l
  2352  0009DC  C004  FFEA         	movff	??_high_isr+3,fsr0h
  2353  0009E0  C003  FFE9         	movff	??_high_isr+2,fsr0l
  2354  0009E4  C002  FFFB         	movff	??_high_isr+1,pclatu
  2355  0009E8  C001  FFFA         	movff	??_high_isr,pclath
  2356  0009EC  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2357  0009EE  0011               	retfie		f
  2358  0009F0                     __end_of_high_isr:
  2359                           	opt stack 0
  2360                           pclatu	equ	0xFFB
  2361                           pclath	equ	0xFFA
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           intcon	equ	0xFF2
  2369                           postinc0	equ	0xFEE
  2370                           fsr0h	equ	0xFEA
  2371                           fsr0l	equ	0xFE9
  2372                           wreg	equ	0xFE8
  2373                           indf1	equ	0xFE7
  2374                           postdec1	equ	0xFE5
  2375                           fsr1h	equ	0xFE2
  2376                           fsr1l	equ	0xFE1
  2377                           bsr	equ	0xFE0
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           pclatu	equ	0xFFB
  2385                           pclath	equ	0xFFA
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           postinc0	equ	0xFEE
  2394                           fsr0h	equ	0xFEA
  2395                           fsr0l	equ	0xFE9
  2396                           wreg	equ	0xFE8
  2397                           indf1	equ	0xFE7
  2398                           postdec1	equ	0xFE5
  2399                           fsr1h	equ	0xFE2
  2400                           fsr1l	equ	0xFE1
  2401                           bsr	equ	0xFE0
  2402                           indf2	equ	0xFDF
  2403                           postinc2	equ	0xFDE
  2404                           postdec2	equ	0xFDD
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409                           	psect	rparam
  2410  0000                     pclatu	equ	0xFFB
  2411                           pclath	equ	0xFFA
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           prodh	equ	0xFF4
  2417                           prodl	equ	0xFF3
  2418                           intcon	equ	0xFF2
  2419                           postinc0	equ	0xFEE
  2420                           fsr0h	equ	0xFEA
  2421                           fsr0l	equ	0xFE9
  2422                           wreg	equ	0xFE8
  2423                           indf1	equ	0xFE7
  2424                           postdec1	equ	0xFE5
  2425                           fsr1h	equ	0xFE2
  2426                           fsr1l	equ	0xFE1
  2427                           bsr	equ	0xFE0
  2428                           indf2	equ	0xFDF
  2429                           postinc2	equ	0xFDE
  2430                           postdec2	equ	0xFDD
  2431                           fsr2h	equ	0xFDA
  2432                           fsr2l	equ	0xFD9
  2433                           status	equ	0xFD8
  2434                           
  2435                           	psect	temp
  2436  000053                     btemp:
  2437                           	opt stack 0
  2438  000053                     	ds	1
  2439  0000                     int$flags	set	btemp
  2440                           pclatu	equ	0xFFB
  2441                           pclath	equ	0xFFA
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           prodh	equ	0xFF4
  2447                           prodl	equ	0xFF3
  2448                           intcon	equ	0xFF2
  2449                           postinc0	equ	0xFEE
  2450                           fsr0h	equ	0xFEA
  2451                           fsr0l	equ	0xFE9
  2452                           wreg	equ	0xFE8
  2453                           indf1	equ	0xFE7
  2454                           postdec1	equ	0xFE5
  2455                           fsr1h	equ	0xFE2
  2456                           fsr1l	equ	0xFE1
  2457                           bsr	equ	0xFE0
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        0
    BSS         269
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      82
    BANK0           128      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 2
		 -> time_after_captrue@cap_value(COMRAM[2]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 2
		 -> time_after_captrue@cap_value(COMRAM[2]), 

    memcpy@s1	PTR const void  size(2) Largest target is 2
		 -> captrue_value(COMRAM[2]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 2
		 -> captrue_value(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    uart_send_string@c	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    sp__memcpy	PTR void  size(2) Largest target is 2
		 -> time_after_captrue@cap_value(COMRAM[2]), 

    time_after_captrue@captrue_now	PTR struct . size(2) Largest target is 2
		 -> captrue_value(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _uart_send_string->_uart_send
    _time_after_captrue->___lmul
    _sprintf->___lldiv
    ___lwmod->___lwdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3569
                                             65 COMRAM     4     4      0
                            ___lldiv
                            _sprintf
                 _time_after_captrue
                          _uart_init
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     3     1      2     233
                                             32 COMRAM     3     1      2
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      15
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     0      8     366
                                             31 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _time_after_captrue                                   8     2      6     853
                                             43 COMRAM     8     2      6
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     312
                                             31 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     322
                                             31 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    1803
                                             44 COMRAM    21    13      8
                            ___lldiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             38 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             31 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             13     5      8     290
                                             31 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _low_isr                                             17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
   _sprintf
     ___lldiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
   _time_after_captrue
     ___lmul
     _memcpy
   _uart_init
   _uart_send_string
     _uart_send

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      52       1       65.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      15        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Dec 17 18:11:13 2018

     __end_of_uart_send_string 0C34                             l52 083E                             l94 0CE6  
                           l95 0CE4                             bsr 000FE0            ___wmul@multiplicand 0022  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                            l144 079E  
                          l506 0A60                            l559 0B72                            l569 0BB4  
                 __CFG_CPB$OFF 000000                            u505 0C56                            u506 0C58  
                 __CFG_CPD$OFF 000000                            u515 0C60                            u516 0C62  
                          u495 0C4C                            u496 0C4E                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l1120 0B48  
                         l1104 0AE4                           l1130 0B68                           l1122 0B4C  
                         l1202 06DC                           l1140 0B92                           l1108 0AF8  
                         l1118 0B40                           l1142 0B96                           l1230 0770  
                         l1214 0720                           l1206 06E2                           l1240 07A4  
                         l1232 0778                           l1208 0704                           l1146 0BAA  
                         l1138 0B8A                           l1234 0780                           l1226 074C  
                         l1250 0816                           l1082 0BEC                           l1092 0CD4  
                         l1076 0BD0                           l1260 0C1C                           l1270 0A1E  
                         l1246 07F6                           l1182 063C                           l1326 08B8  
                         l1280 0A52                           l1272 0A22                           l1248 07FE  
                         l1256 0C04                           l1194 067E                           l1268 0A12  
                         l1188 0656                           STR_1 061E                           STR_2 060B  
                         _LATB 000F8A                           _main 0824                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0053                           prodh 000FF4  
                         prodl 000FF3                           start 00BC                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                          ?_main 0001  
              __end_of___lldiv 0A72                __end_of___lwdiv 0B7C                __end_of___lwmod 0BBE  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _TRISB 000F93  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000            ___lmul@multiplicand 0024  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers 060B                __end_of_isdigit 0CDC  
                 main@time_ccp 0042                __end_of_low_isr 00BC                 __CFG_BOREN$OFF 000000  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
              __end_of_sprintf 0824                __initialization 0C6A                   __end_of_main 0944  
                       ??_main 0042                  __activetblptr 000002    __size_of_time_after_captrue 0062  
                       _CCPR2H 000FBC                         _CCPR2L 000FBB                         i1l1056 0072  
                       i2l1048 09B2                         _SPBRGH 000FB0                 __CFG_XINST$OFF 000000  
             __end_of_high_isr 09F0                         ___lmul 0AD4                         ___wmul 0C98  
               __CFG_STVREN$ON 000000                      ??___lldiv 0028                      ??___lwdiv 0024  
                    ??___lwmod 002B                         _memcpy 0BBE                         clear_0 0C72  
                       clear_1 0C84                      ??_isdigit 0020                   __mediumconst 0000  
                    ??_low_isr 000F                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_sprintf 0035                     __accesstop 0080  
      __end_of__initialization 0C8A                __CFG_PBADEN$OFF 000000                  ___rparam_used 000001  
               __pcstackCOMRAM 0001              ?_uart_send_string 0021             ??_uart_send_string 0023  
                 sprintf@width 003F                     __pbssBANK1 0100                        ?___lmul 0020  
                      ?___wmul 0020                        ?_memcpy 0020                 ___lmul@product 0028  
           __size_of_uart_init 0036             __size_of_uart_send 0010                      ?_high_isr 0001  
time_after_captrue@captrue_now 0030                        __Hparam 0000                        __Lparam 0000  
              __size_of___lmul 0056                        ___lldiv 09F0                __size_of___wmul 0026  
                      ___lwdiv 0B2A                        ___lwmod 0B7C                   __psmallconst 0600  
                      __pcinit 0C6A                __size_of_memcpy 0040                        __ramtop 0600  
                      __ptext0 0824                        __ptext1 0BFE                        __ptext2 0CDC  
                      __ptext3 0C34                        __ptext4 0A72                        __ptext5 0BBE  
                      __ptext6 0AD4                        __ptext7 0632                        __ptext8 0CBE  
                      __ptext9 0C98                        _dpowers 0601              uart_send_string@c 0021  
            uart_send_string@i 0023                        _isdigit 0CBE                      _T3CONbits 000FB1  
                      _low_isr 0018                        _sprintf 0632                     ??_high_isr 0001  
               __pintcode_body 0944           end_of_initialization 0C8A                        memcpy@d 0026  
                      memcpy@n 0024                        memcpy@s 0028                  __Lmediumconst 0000  
                      int_func 0944              __end_of_uart_init 0C6A              __end_of_uart_send 0CEC  
              ___lldiv@divisor 0024                ___lldiv@counter 002C               uart_init@gen_reg 0020  
                    _RCSTAbits 000FAB                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE     __end_of_time_after_captrue 0AD4  
                _new_time_bool 0050                      _TRISCbits 000F94                    _CCP2CONbits 000FBA  
                    _TXSTAbits 000FAC                 __end_of___lmul 0B2A                 __end_of___wmul 0CBE  
                  _BAUDCONbits 000FB8                 __end_of_memcpy 0BFE            start_initialization 0C6A  
    __size_of_uart_send_string 0036               __CFG_OSC$INTIO67 000000                       ??___lmul 0028  
                     ??___wmul 0024               __CFG_LPT1OSC$OFF 000000                       ??_memcpy 0026  
                  __pbssCOMRAM 0046                      _ccp2value 004E                   _isdigit$1040 0021  
  time_after_captrue@cap_value 0032              __size_of_high_isr 09E8                    sprintf@flag 0039  
                  sprintf@prec 003E               ___lwdiv@dividend 0020              __CFG_CCP2MX$PORTC 000000  
                    __pintcode 0008                       ?___lldiv 0020                  _captrue_value 0051  
                     ?___lwdiv 0020                       ?___lwmod 0027                    __pintcodelo 0018  
                  __smallconst 0600                       ?_isdigit 0001                       ?_low_isr 0001  
             ___lwdiv@quotient 0024                       ?_sprintf 002D                 ___wmul@product 0024  
                     _IPR1bits 000F9F                       _IPR2bits 000FA2                       _PIE1bits 000F9D  
                     _PIE2bits 000FA0                       _PIR2bits 000FA1                       _RCONbits 000FD0  
             __CFG_WDTPS$32768 000000                      _uart_init 0C34                      _uart_send 0CDC  
                   uart_send@c 0020              ___wmul@multiplier 0020              ___lmul@multiplier 0020  
           _time_after_captrue 0A72               _uart_send_string 0BFE            ?_time_after_captrue 002C  
                     __Hrparam 0000                       __Lrparam 0000                     ?_uart_init 0020  
                   ?_uart_send 0001               __size_of___lldiv 0082               __size_of___lwdiv 0052  
             __size_of___lwmod 0042           ??_time_after_captrue 0032                     sprintf@val 003C  
             __size_of_isdigit 001E                ___lwdiv@divisor 0022                ___lwdiv@counter 0026  
             __size_of_low_isr 00A4                       __ptext10 0B7C                       __ptext11 0B2A  
                     __ptext12 09F0                       _high_isr 0008               __size_of_sprintf 01F2  
                __size_of_main 0120                 uart_init@brg16 0026     time_after_captrue@overflow 002C  
                     int$flags 0053                     _INTCONbits 000FF2                       memcpy@d1 0020  
                     memcpy@s1 0022                       isdigit@c 0022                       intlevel1 0000  
                     intlevel2 0000                      sprintf@ap 003A                      sprintf@sp 002D  
            _cap_overflow_tmr3 0046               ___lwmod@dividend 0027               ___lldiv@dividend 0020  
                   _OSCCONbits 000FD3                  uart_init@brgh 0024                  uart_init@sync 0022  
                  ??_uart_init 0028                    ??_uart_send 0020                  _overflow_tmr3 004A  
                     sprintf@c 0041                       sprintf@f 002F               ___lldiv@quotient 0028  
              ___lwmod@divisor 0029                ___lwmod@counter 002B                   _print_buffer 0100  
